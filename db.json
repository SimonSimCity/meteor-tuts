{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/meteor/source/fonts/percolate.eot","path":"fonts/percolate.eot","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.ttf","path":"fonts/percolate.ttf","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.woff","path":"fonts/percolate.woff","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/icon-white.svg","path":"images/icon-white.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","path":"images/logo-coralspace-left.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/main.js","path":"script/main.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","path":"script/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/style/style.less","path":"style/style.less","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.svg","path":"fonts/percolate.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/meteor/.git","hash":"049265de896a0397e3c70e6313762e3c26f93523","modified":1474889374000},{"_id":"themes/meteor/_config.yaml","hash":"2bbc5bebc9a3102442c4d4b89d4ae0c829fd4e62","modified":1474889374000},{"_id":"source/index.md","hash":"1d68fc281b12d51d3b82436164f4a70888f644fe","modified":1496388591575},{"_id":"source/commandline.md","hash":"0b329d957b5386c4280d372fcb876d29015ba01d","modified":1474889325000},{"_id":"themes/meteor/layout/layout.ejs","hash":"9c495eaef6bd651b5112cd99e2d98c1dc4fcf394","modified":1478707506886},{"_id":"themes/meteor/layout/page.ejs","hash":"e63b94be51c6ccd49b302c9c91a27873f73c1779","modified":1478101465155},{"_id":"source/api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/packages/accounts-ui.md","hash":"d39b2c6c7c31c45fa3f385d07f28ea9b1cb4431d","modified":1474889325000},{"_id":"source/packages/appcache.md","hash":"88d1f57aeb3c3b7ee3c54bf9a820d05ae644acaa","modified":1474889325000},{"_id":"source/packages/coffeescript.md","hash":"a00aceb918ea7d16331531960168af7795ed90ed","modified":1474889325000},{"_id":"source/packages/audit-argument-checks.md","hash":"14e35b60b49aff6bc6fd398f12e799e834289407","modified":1474889325000},{"_id":"source/packages/jquery.md","hash":"10866aa89a5a93b288342c00539e52922b6b6cc0","modified":1474889325000},{"_id":"source/packages/less.md","hash":"b4d4a20a5a96ffe17b7c5e4a72a1c79960730a2c","modified":1474889325000},{"_id":"source/packages/ecmascript.md","hash":"a000de71dc604eb453363540f8743b56feca7444","modified":1474889325000},{"_id":"source/packages/markdown.md","hash":"029caba5c4b521899f513d6eab2117ee4bbf1071","modified":1474889325000},{"_id":"source/packages/oauth-encryption.md","hash":"96d52e09c837cbb137752de21b749507f25d2820","modified":1474889325000},{"_id":"source/packages/modules.md","hash":"3c169bea0e926cdd28e2d2b040bae07de1d2ae53","modified":1474889325000},{"_id":"source/packages/random.md","hash":"b689a94ec85207d1fa7950a23294298bb0843680","modified":1474889325000},{"_id":"source/packages/spacebars.md","hash":"13454fe7dc69f4f741775fae978307151d8a8c2e","modified":1474889325000},{"_id":"source/packages/underscore.md","hash":"6d3cc369754de4d2b341032cd28bb8523aaebe92","modified":1474889325000},{"_id":"source/packages/webapp.md","hash":"8071b9ee8705fb99a8f236e2de3bf9ac2350d503","modified":1474889325000},{"_id":"themes/meteor/source/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1474889374000},{"_id":"themes/meteor/source/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1474889374000},{"_id":"themes/meteor/source/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1474889374000},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1474889374000},{"_id":"themes/meteor/source/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1474889374000},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1474889374000},{"_id":"themes/meteor/source/style/style.less","hash":"6517fbcd0c75aeb1bd4fc6f0c9a834fcef9a77e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-help.ejs","hash":"03fcaff5811b72920c87fa9154ffc4853b30b8de","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-guide.ejs","hash":"f490bb8fd8e5abd0e71c97c92a335a0802e329e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-compass.ejs","hash":"8072852c211ea881b8facccbe00d975b2507d990","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-logs.ejs","hash":"47638a8a92ab5e5a7a143e1588ca9baaec371f9d","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/panel.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-support.ejs","hash":"4ac49bda616e8046bd4175fbb6e891dfcab658c0","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-github.ejs","hash":"ad171cc4d41acf187831c415cb1928d5ef7a1142","modified":1474889374000},{"_id":"themes/meteor/layout/partials/sidebar.ejs","hash":"2a8d739e3b6d6c1f497ae8ffdd3f9dbe0efe38d6","modified":1478707476014},{"_id":"themes/meteor/source/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Checkbox.less","hash":"9971b489264f4b37fb901cd8417accba7becf270","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Input.less","hash":"5be8dadb507ff338ae7cea539cae535b7779334c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Textarea.less","hash":"4c6089bb5f41dde32d1828d6d27a0899f8e3c8cf","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Select.less","hash":"9065734a36e52c8ce2830d403da3852eebe3590c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Radio.less","hash":"ecc255428e2883b49d074648a290de07b7a9d4d5","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/animation.less","hash":"2c01fa20c282b133dda12a852fb61baba0c0af82","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/base.less","hash":"0fce53b3187d99296dedd0fcd90887a4b336ad83","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/button.less","hash":"d76568349602485c2ec7d0d3380091c4a5e8e2ca","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/form.less","hash":"dcb4320c34011659a1e2974a7ae5b28b444cc519","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/docsearch.less","hash":"26a087b4b6748822b7323584ba8dc375c7462641","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/formatting.less","hash":"7d9dbfc393136e7a28fff7076f74bf5b7f3670cd","modified":1478702733534},{"_id":"themes/meteor/source/style/_global/icon.less","hash":"b6f93082065f57b48185c6fcbffafe5dfc98c86f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/mobile.less","hash":"d4f28dae69f89ce6e9646774ce6d07d6f677c683","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/link.less","hash":"a80547ffbacd58422e7095aadbbd73ba0c650e31","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/nav.less","hash":"e3eb2ec6e2245f6b4d40589c104618f9ed69f37f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/syntax.less","hash":"ff408a13d195a50b3310cdbf5ca31961393e7983","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/layout.less","hash":"655fcc41ad239d5a219aabc4c79c0ac970b6c8bd","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/panel.less","hash":"9438a41518ecdaa01d64ae65317ff6e27b03720d","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/nav.less","hash":"a558ca89e296a7e94d3a29e998aa119c877c065e","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/content.less","hash":"c90d7765335d1ee1eca5726ada84d7cb35a61745","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/sidebar.less","hash":"5fe1fb4c64bcf10d8bfe0caf63d2f969ed206a6c","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/clearfix.import.less","hash":"8dd7f85394fc6e232cad232ea54e605a06be002e","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/color.import.less","hash":"5c88b7bc663df13316e3748f8516f4324f603bd2","modified":1477889942561},{"_id":"themes/meteor/source/style/_util/easing.import.less","hash":"69523005d6afbd184cfa91d629cf1a931ebf8fd1","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/helper.import.less","hash":"7baf147d5c4bac8c5ef4b2690af3b185b4df56d2","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/link.import.less","hash":"a6856c0b5017b7bb688d7a2cf2d5f3bd682df6fe","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/normalize.import.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/index.import.less","hash":"2a38f287116d66f9848229b59d03464b4f9b18b9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/scrollbar.import.less","hash":"1a45d8862fafd8d62f4e2562278a88ed3008ac32","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/lesshat.import.less","hash":"491b7bc1426fb35bf17c28418aadab66b480b5e0","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/text.import.less","hash":"3c1b4559dd5cf7b6b37a42ab8b7ebd9e40e2eee9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/ui.import.less","hash":"b577e1c8092b87f10baef86c0f9d30125b2cdf94","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/typography.import.less","hash":"c8deee0f5ad8b529eeb097d90ef7a3f2f91441f6","modified":1474889374000},{"_id":"source/guide/exposure.md","hash":"6893c7b267318a295ab6b0e9217321b57570cff9","modified":1477242714256},{"_id":"source/guide/links.md","hash":"25c0c110477f71369760a06b5e4e0ced17f884e7","modified":1477238465174},{"_id":"source/guide/query.md","hash":"2778f710129d12fe1fb312bc0a3e4105d5a8e770","modified":1477242714252},{"_id":"source/api/collectionLinks.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/old_api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/old_api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/old_api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/old_api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/old_api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/old_api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/old_api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/old_api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/old_api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/old_api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/old_api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/old_api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/old_api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/old_api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/old_api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/old_api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/old_api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/old_api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/old_api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/old_api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/old_api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/api/collection.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/links/intro.md","hash":"22563ced472e63aac548720e73c40ab9afdc822b","modified":1474944651000},{"_id":"source/links/addLinks.md","hash":"fb9ff624d61dd6f7c3a801dc9efaafb726e768cf","modified":1474945427000},{"_id":"themes/meteor/source/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1477889765000},{"_id":"source/api/reference.md","hash":"c9d62f4f296cda47e8d7fe9c867589cb8db8504d","modified":1476081598852},{"_id":"source/packages/boilerplate.md","hash":"b79d5a279c49629ffec2fae5830d8832e0474061","modified":1476277449040},{"_id":"source/packages/live.md","hash":"1a1e31abcc882e2c4ab4f88051b93828f398da46","modified":1476244662000},{"_id":"source/guide/namedQuery.md","hash":"fb9b64e1178aa6634dd1e1b0fa27367c95a7db64","modified":1476888260769},{"_id":"public/packages/boilerplate.html","hash":"665174f7e1b4feff6855a21d0d55bb44ab33a07a","modified":1476888401514},{"_id":"public/packages/live.html","hash":"0a2e82ff9a2cd1a265b719c224b5d356e8ef51f7","modified":1476888401515},{"_id":"public/index.html","hash":"83cd0ffbbf5bf204a22416669e0ae40aa4c26ffb","modified":1478606307169},{"_id":"public/guide/links.html","hash":"c5f969dbf38c8e880c0f298a26d5de4af725a25c","modified":1477242743358},{"_id":"public/guide/query.html","hash":"44cc7663225cd95a1074e35998c6e3f072f7b7a8","modified":1477242743358},{"_id":"public/api/reference.html","hash":"5804cc3431b97d6f22e75bdcaf78a97a7f1ce98c","modified":1476085992422},{"_id":"public/guide/exposure.html","hash":"8b234e6ae9c612847fd356e09c78d9a8a4d44bb8","modified":1477242743358},{"_id":"public/guide/namedQuery.html","hash":"18e7c7262deab6642396e1162075d13afaa43464","modified":1476888401516},{"_id":"source/api/exposure.md","hash":"b5ec5e9db871bb693b9e25ab6cf5d59ad0702b54","modified":1476888279565},{"_id":"source/api/namedQuery.md","hash":"eda9a78bc73477331f156a28948402034f259e07","modified":1476245109000},{"_id":"source/api/links.md","hash":"4933e81d277eb4f400180ee17100d0c1dfd8e5d5","modified":1476245463000},{"_id":"source/api/query.md","hash":"70ad66dd1db063ce9788d30386c00b8618adcb8f","modified":1477238135558},{"_id":"public/api/exposure.html","hash":"7bb3d6eb402621c8175d21560f69fbbfb0b870bf","modified":1476888401516},{"_id":"public/api/namedQuery.html","hash":"307f9da138f1b2e7f72b5bee136e74017b0c3da7","modified":1476888401516},{"_id":"public/api/links.html","hash":"603498b87891bb87385fdd492fee5b189d8d865b","modified":1476888401516},{"_id":"public/api/query.html","hash":"1e98a577a8bc9afb73a3ee2c15e4b359557890d2","modified":1477242743359},{"_id":"source/gettingStarted.md","hash":"7199eaf4f890d3f93a33aa637eb36176d62d7743","modified":1477475995711},{"_id":"source/chapters/1/intro.md","hash":"d4f71c3ffde2072d38ced1b72814778dfed43110","modified":1496388591575},{"_id":"source/chapters/1/collections.md","hash":"2422f953213c136bffe92eb1f739d66099f0b034","modified":1499163927168},{"_id":"source/chapters/1/methods.md","hash":"116a19f9b6b680443ffa0d11b801546e8a8ccf03","modified":1496388591575},{"_id":"source/chapters/1/pubsub.md","hash":"8c0899d352d4369ab854c9aa5c474fac31fd9e68","modified":1499163895936},{"_id":"source/chapters/1/reactivity.md","hash":"fa4ea25838e5e4682efa393166c04b91946e7b52","modified":1496388591575},{"_id":"source/chapters/1/users.md","hash":"fa79ddd05938d9c6559b2225150795e893c24304","modified":1496388591575},{"_id":"source/chapters/1/security.md","hash":"8849895a164ebfae9f1b7ca4177af338599c19ee","modified":1496388591575},{"_id":"source/chapters/1/meteorSnacks.md","hash":"47f24b099f861b87cdb863c6c8b5f00f55a2b39f","modified":1496388591575},{"_id":"public/chapters/1/reactivity.html","hash":"aa9d4d1acbda136a8bc31dffedc519b430a86539","modified":1478606307169},{"_id":"public/chapters/1/intro.html","hash":"f4d9344e9f9b10af14c2af0e627a5baef91a29a0","modified":1478606307170},{"_id":"public/chapters/1/collections.html","hash":"87af1146b2e2aead3d885bb00b486bb4f511b434","modified":1478606307170},{"_id":"public/chapters/1/methods.html","hash":"0f4288f48b60fe8b5f494d131ec58583a4f69dab","modified":1478606307170},{"_id":"public/chapters/1/pubsub.html","hash":"99ba57b36697b0ba463a9878a20ef9411b1a0d62","modified":1478606307170},{"_id":"public/chapters/1/users.html","hash":"3c108e52970b9be8a472d7705607db6833a3460d","modified":1478606307170},{"_id":"public/chapters/1/security.html","hash":"2812f7f3a2b25a7ceec01969d9df3b41c0c66420","modified":1478606307170},{"_id":"public/chapters/1/meteorSnacks.html","hash":"d06094fdf8572f51cc7fdcf132a3d84b9eb32846","modified":1478606307170},{"_id":"source/chapters/2/blaze.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478600232572},{"_id":"source/chapters/2/react.md","hash":"c9946991b722c8e858ce1cad425bc72b39ad005c","modified":1496388591575},{"_id":"source/chapters/2/intro.md","hash":"5f4a8751b46c8824fb6019a1a8963f2505c6aea3","modified":1478682562735},{"_id":"source/chapters/1/conclusion.md","hash":"22dc7ceb2d2f98a471cf71f1a5dc6146ac5db2e6","modified":1478682562731},{"_id":"public/chapters/2/blaze.html","hash":"5fe67948b8d91195c5cb4d2fd8a04960a3d10377","modified":1478606307193},{"_id":"public/chapters/1/conclusion.html","hash":"38f6ac8032c0650dd40a20af27f8f00423f06e7c","modified":1478606370769},{"_id":"public/chapters/2/react.html","hash":"92b6c461c0584f6cd9c5e5f80174c88284883011","modified":1478606307194},{"_id":"public/chapters/2/intro.html","hash":"8535c7cf63273e7a9ef901690e2a70ebefd8a392","modified":1478606307194},{"_id":"source/chapters/2/conclusion.md","hash":"b48a943cd117555b374e780a09edff742e5e7809","modified":1478692550938}],"Category":[],"Data":[],"Page":[{"title":"Intro","description":"Getting started with Meteor","disqusPage":"Chapter 1: Intro","_content":"\n## Installing the framework\nIn order to be able to develop with Meteor, you will need three basic components: Nodejs, NPM and the Meteor framework itself.\nSo, to get what you need, run the following command in your system terminal:\n\n```\ncurl https://install.meteor.com/ | sh\n```\n\nThis command will work on an Ubuntu based distribution, such as Linux Mint, Elementary OS and so on.\nThis will also work on a Mac!\nTo check that you really have installed what you needed, check the software versions of the components:\n```\nnodejs -v\nnpm -v\nmeteor --version\n```\nIf you don't have errors after running these commands, congratulations! You can move on! \nHowever, if you have errors, check if you ran the commands correctly. \nAfterwards, Google is your best friend! \n\nOn Windows, simply download the installer and follow the basic Windows installation procedure that most software has.\nHere, instead of Bash, Terminator or iTerm, you can use Powershell or the good old Command Prompt.\nThe commands are mostly the same.\n\n##Tools\nThe tool that works best for us, and the one which we recommend you use, would be WebStorm, from Jetbrains.\nStudents can get it for free, and other people can get a free 30-day evaluation trial.\nYou can download Webstorm from [here](https://goo.gl/gqmqwt).\n\nTo learn more about Webstorm go [here](https://www.jetbrains.com/webstorm/documentation/).\n\nAnother tool which is quite easy to learn and use would be Sublime Text. \nThis is a code editor with a lot of features that will make your life a whole lot easier, \nif you're looking to get in the coding business.\nYou can download it from [here](https://www.sublimetext.com/3).\n\nTo learn how to use it properly,go [here](https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-getting-started-and-keyboard-shortcuts).\n\n## Creating a project\n\nAfter you have installed Meteor, you can easily create a new project by running the following command in your terminal:\n\n```\nmeteor create myProjectName\n```\n\n## Start Meteor\n\nNow you have to start up the project you've just created by running the following commands:\n\n```\ncd myProjectName\nmeteor run\n```\n\nThat's it! You've just created your first project in Meteor!\nNow, to view your work, type *http://localhost:3000* in your browser and hit Enter.\nYes ! It's **THAT** easy!\n\nTo stop the project from running, just stop the process in your terminal with Ctrl+c!\n\n## Official resources\n\nThe [Meteor Guide](https://guide.meteor.com) contains a lot of projects recipes.\nDon't dive directly into it, as it requires you to know a little bit about how Meteor works.\n\nThe [Meteor Docs](https://guide.meteor.com) describe the API and functionalities of the modules included with Meteor.\n\n## Application folder structure\n\nThis is the basic folder structure that an application, such as the one you've just created, should be made up of:\n\n<pre>\n├── client \n│   └── main.js // this file contains: import /imports/startup/client\n├── imports\n│   ├── ui // contains anything User-Interface related (We won't cover UI in this Chapter)\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function (ex: routes, jQuery plugins, css, anything concerning the client)\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains: import /imports/startup/server\n</pre>\n\n```\n// to create it quickly, run the commands (they should work just fine on Mac/Linux)\nmkdir -p client server imports/ui imports/startup/client imports/startup/server imports/api\necho \"import '/imports/startup/client';\" > client/main.js\necho \"import '/imports/startup/server';\" > server/main.js\n```\n\n\nEverything in \"/client\" and \"/server\" is automatically loaded, as it is explained [here.](https://guide.meteor.com/structure.html#load-order)\n\nThat's all great ! However, we need more control over our application, and in order to gain that control,\nwe will refrain from using auto-loading in our projects.\n\nEverything in \"/imports\" must be explicitly imported so Meteor can \"gain knowledge\" about it.\nThis gives us the ability to build modular applications.\n[Read more about this here.](https://danmartensen.svbtle.com/build-better-apps-with-es6-modules)\n\n\n## Importing from NPM\n\nFor now, we won't get into a lot of details, but the basic idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from http://www.npmjs.com\nAs an idea, to get you to realise just how many resources you have at your disposal, the NPM system contained roughly 445 797 packages on May 1st of 2017.\n\n```\n// \"moment\" is a library you will most likely use when working with dates\n// This is how you install it:\nmeteor npm install --save moment\n```\nWe use save here because it will save it in our packages.json, meaning that if we work in collaboration with other developers, \n when they download the project to start working on it,they will have the same package with the version you specified, making their life much easier. \n\nTo use \"moment\" in your project, at a basic level, use this code snippet:\n```\nimport moment from 'moment';\n\nmoment(new Date()).format('YYYY-MM-DD')\n```\n\n## Atmosphere\n\nAtmosphere is a package manager which is specific to Meteor only. As such, it will help you manage project dependencies with ease.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\n\nYou can learn more about it on the project webpage: https://atmospherejs.com\n\nAdding a package is as simple as:\nhttps://atmospherejs.com/twbs/bootstrap\n\n```\nmeteor add twbs:bootstrap\n```\n\nThat's it. You now have added bootstrap in your application. And it's ready for you to use it!\nThere are a lot of cool and useful packages out there that we'll explore during these tutorials.\n\n## Importing from Atmosphere\nYou also can use the modular approach with Meteor packages:\n\nAs a sample, we are using SimpleSchema, a package that allows us to easily validate objects.\nThis is the github page of the project: https://github.com/aldeed/meteor-simple-schema\n\n```\n//type into your console\nmeteor add aldeed:simple-schema\n```\n\n```js\n//to use SimpleSchema, add this snippet to any of your source files:\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\nconst schema = new SimpleSchema({\n    title: {\n        type: String\n    }\n})\n```\n\nIf the package exports the objects, you will be able to access them by importing from the package, but note that we are prefixing it with \"meteor/\".\n\n## Importing from local files\n\nAs you saw in the example for creating the project folder structure, we have the ability to import from local files by using an \"absolute path\"\n```\nimport X from /imports/something.js\n```\n\n```\n// relative path\n// given you have two files: /imports/api/X.js and /imports/api/Y.js\n// in Y.js file you can use a relative path (not a lot of details in that file path) :\nimport X from './X.js'\n\n// but you could also use an absolute path ( all the details, no room to wiggle out of it :-) )\nimport X from '/imports/api/X.js'\n\n// or you can use \"..\" to specify the previous folder\nimport X from '../api/X.js'\n\n// you can even omit the \".js\" part\nimport X from './X';\n\n// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder\nimport Z from './Z';\n\n// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js\n```\n\nPretty easy right ?\n\nWould you like to find more about importing and exporting ? Read more here:\n- http://exploringjs.com/es6/ch_modules.html\n- https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\n\n\n## Need Help ?\n\nIf you need help, or you get stuck you can ask other Meteor evangelists out there:\n- https://forums.meteor.com\n- #meteor channel on FreeNode Server: [https://webchat.freenode.net/](https://webchat.freenode.net/)\n\nMake sure you Google your questions first, to find out if somebody had the same problem as well ( and most likely has found an answer to that problem ), before asking the community!\n\n\n","source":"chapters/1/intro.md","raw":"---\ntitle: 'Intro'\ndescription: Getting started with Meteor\ndisqusPage: 'Chapter 1: Intro'\n---\n\n## Installing the framework\nIn order to be able to develop with Meteor, you will need three basic components: Nodejs, NPM and the Meteor framework itself.\nSo, to get what you need, run the following command in your system terminal:\n\n```\ncurl https://install.meteor.com/ | sh\n```\n\nThis command will work on an Ubuntu based distribution, such as Linux Mint, Elementary OS and so on.\nThis will also work on a Mac!\nTo check that you really have installed what you needed, check the software versions of the components:\n```\nnodejs -v\nnpm -v\nmeteor --version\n```\nIf you don't have errors after running these commands, congratulations! You can move on! \nHowever, if you have errors, check if you ran the commands correctly. \nAfterwards, Google is your best friend! \n\nOn Windows, simply download the installer and follow the basic Windows installation procedure that most software has.\nHere, instead of Bash, Terminator or iTerm, you can use Powershell or the good old Command Prompt.\nThe commands are mostly the same.\n\n##Tools\nThe tool that works best for us, and the one which we recommend you use, would be WebStorm, from Jetbrains.\nStudents can get it for free, and other people can get a free 30-day evaluation trial.\nYou can download Webstorm from [here](https://goo.gl/gqmqwt).\n\nTo learn more about Webstorm go [here](https://www.jetbrains.com/webstorm/documentation/).\n\nAnother tool which is quite easy to learn and use would be Sublime Text. \nThis is a code editor with a lot of features that will make your life a whole lot easier, \nif you're looking to get in the coding business.\nYou can download it from [here](https://www.sublimetext.com/3).\n\nTo learn how to use it properly,go [here](https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-getting-started-and-keyboard-shortcuts).\n\n## Creating a project\n\nAfter you have installed Meteor, you can easily create a new project by running the following command in your terminal:\n\n```\nmeteor create myProjectName\n```\n\n## Start Meteor\n\nNow you have to start up the project you've just created by running the following commands:\n\n```\ncd myProjectName\nmeteor run\n```\n\nThat's it! You've just created your first project in Meteor!\nNow, to view your work, type *http://localhost:3000* in your browser and hit Enter.\nYes ! It's **THAT** easy!\n\nTo stop the project from running, just stop the process in your terminal with Ctrl+c!\n\n## Official resources\n\nThe [Meteor Guide](https://guide.meteor.com) contains a lot of projects recipes.\nDon't dive directly into it, as it requires you to know a little bit about how Meteor works.\n\nThe [Meteor Docs](https://guide.meteor.com) describe the API and functionalities of the modules included with Meteor.\n\n## Application folder structure\n\nThis is the basic folder structure that an application, such as the one you've just created, should be made up of:\n\n<pre>\n├── client \n│   └── main.js // this file contains: import /imports/startup/client\n├── imports\n│   ├── ui // contains anything User-Interface related (We won't cover UI in this Chapter)\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function (ex: routes, jQuery plugins, css, anything concerning the client)\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains: import /imports/startup/server\n</pre>\n\n```\n// to create it quickly, run the commands (they should work just fine on Mac/Linux)\nmkdir -p client server imports/ui imports/startup/client imports/startup/server imports/api\necho \"import '/imports/startup/client';\" > client/main.js\necho \"import '/imports/startup/server';\" > server/main.js\n```\n\n\nEverything in \"/client\" and \"/server\" is automatically loaded, as it is explained [here.](https://guide.meteor.com/structure.html#load-order)\n\nThat's all great ! However, we need more control over our application, and in order to gain that control,\nwe will refrain from using auto-loading in our projects.\n\nEverything in \"/imports\" must be explicitly imported so Meteor can \"gain knowledge\" about it.\nThis gives us the ability to build modular applications.\n[Read more about this here.](https://danmartensen.svbtle.com/build-better-apps-with-es6-modules)\n\n\n## Importing from NPM\n\nFor now, we won't get into a lot of details, but the basic idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from http://www.npmjs.com\nAs an idea, to get you to realise just how many resources you have at your disposal, the NPM system contained roughly 445 797 packages on May 1st of 2017.\n\n```\n// \"moment\" is a library you will most likely use when working with dates\n// This is how you install it:\nmeteor npm install --save moment\n```\nWe use save here because it will save it in our packages.json, meaning that if we work in collaboration with other developers, \n when they download the project to start working on it,they will have the same package with the version you specified, making their life much easier. \n\nTo use \"moment\" in your project, at a basic level, use this code snippet:\n```\nimport moment from 'moment';\n\nmoment(new Date()).format('YYYY-MM-DD')\n```\n\n## Atmosphere\n\nAtmosphere is a package manager which is specific to Meteor only. As such, it will help you manage project dependencies with ease.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\n\nYou can learn more about it on the project webpage: https://atmospherejs.com\n\nAdding a package is as simple as:\nhttps://atmospherejs.com/twbs/bootstrap\n\n```\nmeteor add twbs:bootstrap\n```\n\nThat's it. You now have added bootstrap in your application. And it's ready for you to use it!\nThere are a lot of cool and useful packages out there that we'll explore during these tutorials.\n\n## Importing from Atmosphere\nYou also can use the modular approach with Meteor packages:\n\nAs a sample, we are using SimpleSchema, a package that allows us to easily validate objects.\nThis is the github page of the project: https://github.com/aldeed/meteor-simple-schema\n\n```\n//type into your console\nmeteor add aldeed:simple-schema\n```\n\n```js\n//to use SimpleSchema, add this snippet to any of your source files:\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\nconst schema = new SimpleSchema({\n    title: {\n        type: String\n    }\n})\n```\n\nIf the package exports the objects, you will be able to access them by importing from the package, but note that we are prefixing it with \"meteor/\".\n\n## Importing from local files\n\nAs you saw in the example for creating the project folder structure, we have the ability to import from local files by using an \"absolute path\"\n```\nimport X from /imports/something.js\n```\n\n```\n// relative path\n// given you have two files: /imports/api/X.js and /imports/api/Y.js\n// in Y.js file you can use a relative path (not a lot of details in that file path) :\nimport X from './X.js'\n\n// but you could also use an absolute path ( all the details, no room to wiggle out of it :-) )\nimport X from '/imports/api/X.js'\n\n// or you can use \"..\" to specify the previous folder\nimport X from '../api/X.js'\n\n// you can even omit the \".js\" part\nimport X from './X';\n\n// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder\nimport Z from './Z';\n\n// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js\n```\n\nPretty easy right ?\n\nWould you like to find more about importing and exporting ? Read more here:\n- http://exploringjs.com/es6/ch_modules.html\n- https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\n\n\n## Need Help ?\n\nIf you need help, or you get stuck you can ask other Meteor evangelists out there:\n- https://forums.meteor.com\n- #meteor channel on FreeNode Server: [https://webchat.freenode.net/](https://webchat.freenode.net/)\n\nMake sure you Google your questions first, to find out if somebody had the same problem as well ( and most likely has found an answer to that problem ), before asking the community!\n\n\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/intro.html","_id":"ciuqri0q20001ufjxcqpoqtlv","comments":1,"layout":"page","content":"<h2 id=\"Installing-the-framework\"><a href=\"#Installing-the-framework\" class=\"headerlink\" title=\"Installing the framework\"></a>Installing the framework</h2><p>In order to be able to develop with Meteor, you will need three basic components: Nodejs, NPM and the Meteor framework itself.\nSo, to get what you need, run the following command in your system terminal:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http<span class=\"variable\">s:</span>//install.meteor.<span class=\"keyword\">com</span>/ | <span class=\"keyword\">sh</span></div></pre></td></tr></table></figure>\n<p>This command will work on an Ubuntu based distribution, such as Linux Mint, Elementary OS and so on.\nThis will also work on a Mac!\nTo check that you really have installed what you needed, check the software versions of the components:\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nodejs -v</div><div class=\"line\">npm -v</div><div class=\"line\">meteor <span class=\"comment\">--version</span></div></pre></td></tr></table></figure></p>\n<p>If you don’t have errors after running these commands, congratulations! You can move on! \nHowever, if you have errors, check if you ran the commands correctly. \nAfterwards, Google is your best friend! </p>\n<p>On Windows, simply download the installer and follow the basic Windows installation procedure that most software has.\nHere, instead of Bash, Terminator or iTerm, you can use Powershell or the good old Command Prompt.\nThe commands are mostly the same.</p>\n<p>##Tools\nThe tool that works best for us, and the one which we recommend you use, would be WebStorm, from Jetbrains.\nStudents can get it for free, and other people can get a free 30-day evaluation trial.\nYou can download Webstorm from <a href=\"https://goo.gl/gqmqwt\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>To learn more about Webstorm go <a href=\"https://www.jetbrains.com/webstorm/documentation/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>Another tool which is quite easy to learn and use would be Sublime Text. \nThis is a code editor with a lot of features that will make your life a whole lot easier, \nif you’re looking to get in the coding business.\nYou can download it from <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>To learn how to use it properly,go <a href=\"https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-getting-started-and-keyboard-shortcuts\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>After you have installed Meteor, you can easily create a new project by running the following command in your terminal:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">meteor create myProjectName</span></div></pre></td></tr></table></figure>\n<h2 id=\"Start-Meteor\"><a href=\"#Start-Meteor\" class=\"headerlink\" title=\"Start Meteor\"></a>Start Meteor</h2><p>Now you have to start up the project you’ve just created by running the following commands:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd myProjectName</div><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<p>That’s it! You’ve just created your first project in Meteor!\nNow, to view your work, type <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></em> in your browser and hit Enter.\nYes ! It’s <strong>THAT</strong> easy!</p>\n<p>To stop the project from running, just stop the process in your terminal with Ctrl+c!</p>\n<h2 id=\"Official-resources\"><a href=\"#Official-resources\" class=\"headerlink\" title=\"Official resources\"></a>Official resources</h2><p>The <a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Guide</a> contains a lot of projects recipes.\nDon’t dive directly into it, as it requires you to know a little bit about how Meteor works.</p>\n<p>The <a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Docs</a> describe the API and functionalities of the modules included with Meteor.</p>\n<h2 id=\"Application-folder-structure\"><a href=\"#Application-folder-structure\" class=\"headerlink\" title=\"Application folder structure\"></a>Application folder structure</h2><p>This is the basic folder structure that an application, such as the one you’ve just created, should be made up of:</p>\n<pre>\n├── client \n│   └── main.js // this file contains: import /imports/startup/client\n├── imports\n│   ├── ui // contains anything User-Interface related (We won't cover UI in this Chapter)\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function (ex: routes, jQuery plugins, css, anything concerning the client)\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains: import /imports/startup/server\n</pre>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// to create it quickly, run the commands (they should work just fine on Mac/Linux)</span></div><div class=\"line\">mkdir -p <span class=\"keyword\">client</span> <span class=\"keyword\">server</span> imports/ui imports/startup/<span class=\"keyword\">client</span> imports/startup/<span class=\"keyword\">server</span> imports/api</div><div class=\"line\">echo <span class=\"string\">\"import '/imports/startup/client';\"</span> &gt; <span class=\"keyword\">client</span>/main.js</div><div class=\"line\">echo <span class=\"string\">\"import '/imports/startup/server';\"</span> &gt; <span class=\"keyword\">server</span>/main.js</div></pre></td></tr></table></figure>\n<p>Everything in “/client” and “/server” is automatically loaded, as it is explained <a href=\"https://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"external\">here.</a></p>\n<p>That’s all great ! However, we need more control over our application, and in order to gain that control,\nwe will refrain from using auto-loading in our projects.</p>\n<p>Everything in “/imports” must be explicitly imported so Meteor can “gain knowledge” about it.\nThis gives us the ability to build modular applications.\n<a href=\"https://danmartensen.svbtle.com/build-better-apps-with-es6-modules\" target=\"_blank\" rel=\"external\">Read more about this here.</a></p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into a lot of details, but the basic idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a>\nAs an idea, to get you to realise just how many resources you have at your disposal, the NPM system contained roughly 445 797 packages on May 1st of 2017.</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// \"moment\" is a library you will most likely use when working with dates</span></div><div class=\"line\"><span class=\"comment\">// This is how you install it:</span></div><div class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></div></pre></td></tr></table></figure>\n<p>We use save here because it will save it in our packages.json, meaning that if we work in collaboration with other developers, \n when they download the project to start working on it,they will have the same package with the version you specified, making their life much easier. </p>\n<p>To use “moment” in your project, at a basic level, use this code snippet:\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import <span class=\"built_in\">moment</span> from '<span class=\"built_in\">moment</span>';</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">moment</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).<span class=\"keyword\">format</span>('YYYY-MM-DD')</div></pre></td></tr></table></figure></p>\n<h2 id=\"Atmosphere\"><a href=\"#Atmosphere\" class=\"headerlink\" title=\"Atmosphere\"></a>Atmosphere</h2><p>Atmosphere is a package manager which is specific to Meteor only. As such, it will help you manage project dependencies with ease.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.</p>\n<p>You can learn more about it on the project webpage: <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">https://atmospherejs.com</a></p>\n<p>Adding a package is as simple as:\n<a href=\"https://atmospherejs.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">https://atmospherejs.com/twbs/bootstrap</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> twbs:bootstrap</span></div></pre></td></tr></table></figure>\n<p>That’s it. You now have added bootstrap in your application. And it’s ready for you to use it!\nThere are a lot of cool and useful packages out there that we’ll explore during these tutorials.</p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You also can use the modular approach with Meteor packages:</p>\n<p>As a sample, we are using SimpleSchema, a package that allows us to easily validate objects.\nThis is the github page of the project: <a href=\"https://github.com/aldeed/meteor-simple-schema\" target=\"_blank\" rel=\"external\">https://github.com/aldeed/meteor-simple-schema</a></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//type into your console</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> aldeed:simple-schema</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//to use SimpleSchema, add this snippet to any of your source files:</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SimpleSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/aldeed:simple-schema'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> schema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"built_in\">String</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If the package exports the objects, you will be able to access them by importing from the package, but note that we are prefixing it with “meteor/“.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for creating the project folder structure, we have the ability to import from local files by using an “absolute path”\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"regexp\">/imports/</span>something.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// relative path</span></div><div class=\"line\"><span class=\"comment\">// given you have two files: /imports/api/X.js and /imports/api/Y.js</span></div><div class=\"line\"><span class=\"comment\">// in Y.js file you can use a relative path (not a lot of details in that file path) :</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// but you could also use an absolute path ( all the details, no room to wiggle out of it :-) )</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or you can use \"..\" to specify the previous folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'../api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can even omit the \".js\" part</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> Z <span class=\"keyword\">from</span> <span class=\"string\">'./Z'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js</span></div></pre></td></tr></table></figure>\n<p>Pretty easy right ?</p>\n<p>Would you like to find more about importing and exporting ? Read more here:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<h2 id=\"Need-Help\"><a href=\"#Need-Help\" class=\"headerlink\" title=\"Need Help ?\"></a>Need Help ?</h2><p>If you need help, or you get stuck you can ask other Meteor evangelists out there:</p>\n<ul>\n<li><a href=\"https://forums.meteor.com\" target=\"_blank\" rel=\"external\">https://forums.meteor.com</a></li>\n<li>#meteor channel on FreeNode Server: <a href=\"https://webchat.freenode.net/\" target=\"_blank\" rel=\"external\">https://webchat.freenode.net/</a></li>\n</ul>\n<p>Make sure you Google your questions first, to find out if somebody had the same problem as well ( and most likely has found an answer to that problem ), before asking the community!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Installing-the-framework\"><a href=\"#Installing-the-framework\" class=\"headerlink\" title=\"Installing the framework\"></a>Installing the framework</h2><p>In order to be able to develop with Meteor, you will need three basic components: Nodejs, NPM and the Meteor framework itself.\nSo, to get what you need, run the following command in your system terminal:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http<span class=\"variable\">s:</span>//install.meteor.<span class=\"keyword\">com</span>/ | <span class=\"keyword\">sh</span></div></pre></td></tr></table></figure>\n<p>This command will work on an Ubuntu based distribution, such as Linux Mint, Elementary OS and so on.\nThis will also work on a Mac!\nTo check that you really have installed what you needed, check the software versions of the components:\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nodejs -v</div><div class=\"line\">npm -v</div><div class=\"line\">meteor <span class=\"comment\">--version</span></div></pre></td></tr></table></figure></p>\n<p>If you don’t have errors after running these commands, congratulations! You can move on! \nHowever, if you have errors, check if you ran the commands correctly. \nAfterwards, Google is your best friend! </p>\n<p>On Windows, simply download the installer and follow the basic Windows installation procedure that most software has.\nHere, instead of Bash, Terminator or iTerm, you can use Powershell or the good old Command Prompt.\nThe commands are mostly the same.</p>\n<p>##Tools\nThe tool that works best for us, and the one which we recommend you use, would be WebStorm, from Jetbrains.\nStudents can get it for free, and other people can get a free 30-day evaluation trial.\nYou can download Webstorm from <a href=\"https://goo.gl/gqmqwt\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>To learn more about Webstorm go <a href=\"https://www.jetbrains.com/webstorm/documentation/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>Another tool which is quite easy to learn and use would be Sublime Text. \nThis is a code editor with a lot of features that will make your life a whole lot easier, \nif you’re looking to get in the coding business.\nYou can download it from <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>To learn how to use it properly,go <a href=\"https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-getting-started-and-keyboard-shortcuts\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>After you have installed Meteor, you can easily create a new project by running the following command in your terminal:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">meteor create myProjectName</span></div></pre></td></tr></table></figure>\n<h2 id=\"Start-Meteor\"><a href=\"#Start-Meteor\" class=\"headerlink\" title=\"Start Meteor\"></a>Start Meteor</h2><p>Now you have to start up the project you’ve just created by running the following commands:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd myProjectName</div><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<p>That’s it! You’ve just created your first project in Meteor!\nNow, to view your work, type <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></em> in your browser and hit Enter.\nYes ! It’s <strong>THAT</strong> easy!</p>\n<p>To stop the project from running, just stop the process in your terminal with Ctrl+c!</p>\n<h2 id=\"Official-resources\"><a href=\"#Official-resources\" class=\"headerlink\" title=\"Official resources\"></a>Official resources</h2><p>The <a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Guide</a> contains a lot of projects recipes.\nDon’t dive directly into it, as it requires you to know a little bit about how Meteor works.</p>\n<p>The <a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Docs</a> describe the API and functionalities of the modules included with Meteor.</p>\n<h2 id=\"Application-folder-structure\"><a href=\"#Application-folder-structure\" class=\"headerlink\" title=\"Application folder structure\"></a>Application folder structure</h2><p>This is the basic folder structure that an application, such as the one you’ve just created, should be made up of:</p>\n<pre>\n├── client \n│   └── main.js // this file contains: import /imports/startup/client\n├── imports\n│   ├── ui // contains anything User-Interface related (We won't cover UI in this Chapter)\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function (ex: routes, jQuery plugins, css, anything concerning the client)\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains: import /imports/startup/server\n</pre>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// to create it quickly, run the commands (they should work just fine on Mac/Linux)</span></div><div class=\"line\">mkdir -p <span class=\"keyword\">client</span> <span class=\"keyword\">server</span> imports/ui imports/startup/<span class=\"keyword\">client</span> imports/startup/<span class=\"keyword\">server</span> imports/api</div><div class=\"line\">echo <span class=\"string\">\"import '/imports/startup/client';\"</span> &gt; <span class=\"keyword\">client</span>/main.js</div><div class=\"line\">echo <span class=\"string\">\"import '/imports/startup/server';\"</span> &gt; <span class=\"keyword\">server</span>/main.js</div></pre></td></tr></table></figure>\n<p>Everything in “/client” and “/server” is automatically loaded, as it is explained <a href=\"https://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"external\">here.</a></p>\n<p>That’s all great ! However, we need more control over our application, and in order to gain that control,\nwe will refrain from using auto-loading in our projects.</p>\n<p>Everything in “/imports” must be explicitly imported so Meteor can “gain knowledge” about it.\nThis gives us the ability to build modular applications.\n<a href=\"https://danmartensen.svbtle.com/build-better-apps-with-es6-modules\" target=\"_blank\" rel=\"external\">Read more about this here.</a></p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into a lot of details, but the basic idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a>\nAs an idea, to get you to realise just how many resources you have at your disposal, the NPM system contained roughly 445 797 packages on May 1st of 2017.</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// \"moment\" is a library you will most likely use when working with dates</span></div><div class=\"line\"><span class=\"comment\">// This is how you install it:</span></div><div class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></div></pre></td></tr></table></figure>\n<p>We use save here because it will save it in our packages.json, meaning that if we work in collaboration with other developers, \n when they download the project to start working on it,they will have the same package with the version you specified, making their life much easier. </p>\n<p>To use “moment” in your project, at a basic level, use this code snippet:\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import <span class=\"built_in\">moment</span> from '<span class=\"built_in\">moment</span>';</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">moment</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).<span class=\"keyword\">format</span>('YYYY-MM-DD')</div></pre></td></tr></table></figure></p>\n<h2 id=\"Atmosphere\"><a href=\"#Atmosphere\" class=\"headerlink\" title=\"Atmosphere\"></a>Atmosphere</h2><p>Atmosphere is a package manager which is specific to Meteor only. As such, it will help you manage project dependencies with ease.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.</p>\n<p>You can learn more about it on the project webpage: <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">https://atmospherejs.com</a></p>\n<p>Adding a package is as simple as:\n<a href=\"https://atmospherejs.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">https://atmospherejs.com/twbs/bootstrap</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> twbs:bootstrap</span></div></pre></td></tr></table></figure>\n<p>That’s it. You now have added bootstrap in your application. And it’s ready for you to use it!\nThere are a lot of cool and useful packages out there that we’ll explore during these tutorials.</p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You also can use the modular approach with Meteor packages:</p>\n<p>As a sample, we are using SimpleSchema, a package that allows us to easily validate objects.\nThis is the github page of the project: <a href=\"https://github.com/aldeed/meteor-simple-schema\" target=\"_blank\" rel=\"external\">https://github.com/aldeed/meteor-simple-schema</a></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//type into your console</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> aldeed:simple-schema</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//to use SimpleSchema, add this snippet to any of your source files:</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SimpleSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/aldeed:simple-schema'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> schema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"built_in\">String</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If the package exports the objects, you will be able to access them by importing from the package, but note that we are prefixing it with “meteor/“.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for creating the project folder structure, we have the ability to import from local files by using an “absolute path”\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"regexp\">/imports/</span>something.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// relative path</span></div><div class=\"line\"><span class=\"comment\">// given you have two files: /imports/api/X.js and /imports/api/Y.js</span></div><div class=\"line\"><span class=\"comment\">// in Y.js file you can use a relative path (not a lot of details in that file path) :</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// but you could also use an absolute path ( all the details, no room to wiggle out of it :-) )</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or you can use \"..\" to specify the previous folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'../api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can even omit the \".js\" part</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> Z <span class=\"keyword\">from</span> <span class=\"string\">'./Z'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js</span></div></pre></td></tr></table></figure>\n<p>Pretty easy right ?</p>\n<p>Would you like to find more about importing and exporting ? Read more here:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<h2 id=\"Need-Help\"><a href=\"#Need-Help\" class=\"headerlink\" title=\"Need Help ?\"></a>Need Help ?</h2><p>If you need help, or you get stuck you can ask other Meteor evangelists out there:</p>\n<ul>\n<li><a href=\"https://forums.meteor.com\" target=\"_blank\" rel=\"external\">https://forums.meteor.com</a></li>\n<li>#meteor channel on FreeNode Server: <a href=\"https://webchat.freenode.net/\" target=\"_blank\" rel=\"external\">https://webchat.freenode.net/</a></li>\n</ul>\n<p>Make sure you Google your questions first, to find out if somebody had the same problem as well ( and most likely has found an answer to that problem ), before asking the community!</p>\n"},{"title":"Collections","description":"How we store our data in Meteor.","disqusPage":"Chapter 1: Collections","_content":"\n## Let's talk data!\n\nMeteor uses MongoDB as its default database system. Theoretically you can use any database you want, because\nyou have access to *http://www.npmjs.com*, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a database). \n\n## Show and tell comparison\nSince everyone knows what MySQL is, let's compare MongoDB with it, so you can better understand why it's better for what we need. \nUnlike MySQL, in MongoDB you don't have to CREATE TABLE, or CREATE FIELD in order to create a table or a field, because MongoDB \nlets you structure your data the way you want. You still however need consistency across your data, which is why, later on,\nwe will teach you how to ensure this consistency at an application level, not at the database level.\n\nNow we'd like to make some analogies, but you're going to need to be familiar with the syntax of MySQL at a basic level.\nIf you're not, read a little bit about it [here](https://www.tutorialspoint.com/mysql/).\n\nNow let's make those analogies:\n- DATABASE = Database (yes, the same name)\n- TABLE = Collection (a list of data, a collection)\n- ROW = Document (the actual list of data inside the collection)\n\nI like donuts...despite knowing that they're unhealthy.\nI love donuts so much that I want to store them in a database !\n\nFirstly, let's create a new file in the project file structure we created earlier, by running these commands in the \n/imports/api folder:\n```\nmkdir donuts\ncd donuts\ntouch collection.js\n```\n\nNow let's write some code in this file we have just created:\n\n```js\nimport { Mongo } from 'meteor/mongo';\n\nconst Donuts = new Mongo.Collection('donuts');\n\nexport default Donuts;\n```\n\n## Nasty Globals\n\nSo let's start solving those errors,right ?\nSince our Donuts are isolated in their own module, we need to gain access to them. For that purpose, and only in this tutorial, we will use some very nasty global variables.\nDon't try this in a production project ! It fits into the category \"Bad practices\" !!\n\nGo to \"/imports/startup/server/index.js\" and type this in the source file:\n\n```js\nimport './nasty-globals.js'\n```\nNow, let's move over to \"/imports/startup/server/nasty-globals.js\":\n\n```js\nimport Donuts from '/imports/api/donuts/collection.js'\n```\n\nAs a reminder: because we used export default, when we import, we can import as any name:\n```js\n//import Any_Name_I_Want_Will_Have_The_Same_Effect from '/imports/api/donuts/collection.js'\nDonutsCollection = Donuts \n```\nBecause we did not use var, let, const before it, it's a global variable !\n\n## The Meteor console\nIn Meteor, we have at our disposal a console for the server side of the application.\nWe can use this for debugging purposes.\nTo use it, go to the file in which you have created your application, and open a terminal.\nType the following command into your terminal:\n```\nmeteor shell\n```\n\nThis will open a terminal from which you can test code snippets. The results of your test will not appear in the command prompt \nfrom which you started your terminal\n\n## Inserting data \nTo get a better idea about how data is inserted into MongoDB from Meteor, run the following code snippet in your Meteor Shell, after running your project:\n```js\nDonutsCollection.insert({\n    color: 'pinkish-green', \n    flavors: ['mustard', 'onions'], \n    price: 999.0, \n    expiresAt: new Date(),\n    isCommestible: false,\n    ratings: {\n        taste: 2,\n        awesomeness: 10,\n    }\n})\n```\n\nWe inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). The sky's the limit ! \n\n## Result\n\nAfter running the code snippet for data insertion in your Meteor shell, you will get the following output in the terminal window:\n```\n'MLx7SF79kXvAZuEyx'\n```\n\nThis represents the response we get from .insert() after inserting the data. This represents the newly created id. \n(Which is stored as _id in the Document in the database)\n\n\n## Finding data\nNow let's fetch all the the data related to our donuts from the database (we run this in Meteor shell):\n```js\nDonutsCollection.find()\n```\n\nIf you run this code snippet, you will get a bunch of data displayed into your Meteor shell.\nSo how was that accomplished ?\nWith a cursor! That involves using the methods find() and fetch(), about which we'll talk later!\n\n```js\nDonutsCollection.find().fetch()\n```\n\nLet's add another *donut* to our \"inventory\", so that we can do something more advanced with our data: \n```js\nDonutsCollection.insert({price: 50, isCommestible: true});\n```\nAs a tip, you should see an id in your shell. That way you know you did the tutorial right !\n\nNow let's search our database:\n```js\n// we only have to eat commestible donuts\nDonutsCollection.find({isCommestible: true}).fetch()\n\n// and we want to get the good stuf, even if it's expensive, so let's get the donuts with a price bigger than 200\nDonutsCollection.find({price: {$gt: 200}}).fetch()\n```\nTo be able to query MongoDB efficiently, you need to know some things about selectors.\nRead [this](https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators) to get acquainted with them.\n\nfind() also takes arguments, named \"options\":\n```js\nDonutsCollection.find({}, {\n    sort: {price: -1}, // sorts price in descending order\n    limit: 2, // limits the results to 2\n    fields: {price: 1, isCommestible: 1} // will only return the fields price and isCommestible\n}).fetch()\n```\n\nThere are other fields as well, but we don't want to get into the details just yet, and if you're as curious as we are, \nyou can read about them [here](http://docs.meteor.com/api/collections.html#Mongo-Collection-find).\n\n## Updating the data\n\nWhat about updating the data ?\nWell, it's so simple you won't believe it:\n```js\nDonutsCollection.update({price: 50}, {\n    $set: {price: 51}\n})\n```\n\nThe first argument represents the data that you \"want to update\", and the second tells the system \"how you update it\". \nYou can use arguments such as \"$inc\" for incrementing, \n\"$addToSet\" if you want to add another delicious ingredient in the \"flavors\" array.\n\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go [here](https://docs.mongodb.com/manual/reference/operator/update/).\n\n## Removing data\n\nRemoving data is easy, and the argument it takes to do it is what we want to remove:\n```js\nDonutsCollection.remove({price: {gt: 1000}})\n```\n\nKeep playing with the code, try new inserts, try new selectors. Have a little bit of fun! You deserve it!\n\nIf you have a MongoDB visualizer, like \"[Robomongo](https://robomongo.org/)\" for Ubuntu, or any other tools out [there](http://lmgtfy.com/?q=mongodb+admin+software),\nyou can connect to the database by using \"localhost\" and port 3001, when Meteor is started, and see how it works for yourself!\n\n\n## Tips and tricks\n\nYou can also find/update/remove by using the id as a string:\n```js\nDonutsCollection.update('XXX', modifier)\n// equivallent\nDonutsCollection.update({_id: 'XXX'}, modifier)\n```\n\n## Let's have some fun !\n\n#### 1. Help mr John\nMr John wants to find all donuts that have a price bigger than 200 and they have at least one flavor!\nHelp him with build a query! [Hint](https://docs.mongodb.com/manual/reference/operator/query/size/#op._S_size)\n\n#### 2. Price change\nIt's donut season. Run an update that increases all prices by 100, so you can make more profit! \n[Hint](https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc)\n\n#### 3. Reality hit\nPeople did not like the new prices, so create a query that will decrease the prices for the most 3 expensive \ndonuts by 10%. [Hint](https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul)\n\n\n\n\n\n\n\n\n","source":"chapters/1/collections.md","raw":"---\ntitle: Collections\ndescription: How we store our data in Meteor.\ndisqusPage: 'Chapter 1: Collections'\n---\n\n## Let's talk data!\n\nMeteor uses MongoDB as its default database system. Theoretically you can use any database you want, because\nyou have access to *http://www.npmjs.com*, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a database). \n\n## Show and tell comparison\nSince everyone knows what MySQL is, let's compare MongoDB with it, so you can better understand why it's better for what we need. \nUnlike MySQL, in MongoDB you don't have to CREATE TABLE, or CREATE FIELD in order to create a table or a field, because MongoDB \nlets you structure your data the way you want. You still however need consistency across your data, which is why, later on,\nwe will teach you how to ensure this consistency at an application level, not at the database level.\n\nNow we'd like to make some analogies, but you're going to need to be familiar with the syntax of MySQL at a basic level.\nIf you're not, read a little bit about it [here](https://www.tutorialspoint.com/mysql/).\n\nNow let's make those analogies:\n- DATABASE = Database (yes, the same name)\n- TABLE = Collection (a list of data, a collection)\n- ROW = Document (the actual list of data inside the collection)\n\nI like donuts...despite knowing that they're unhealthy.\nI love donuts so much that I want to store them in a database !\n\nFirstly, let's create a new file in the project file structure we created earlier, by running these commands in the \n/imports/api folder:\n```\nmkdir donuts\ncd donuts\ntouch collection.js\n```\n\nNow let's write some code in this file we have just created:\n\n```js\nimport { Mongo } from 'meteor/mongo';\n\nconst Donuts = new Mongo.Collection('donuts');\n\nexport default Donuts;\n```\n\n## Nasty Globals\n\nSo let's start solving those errors,right ?\nSince our Donuts are isolated in their own module, we need to gain access to them. For that purpose, and only in this tutorial, we will use some very nasty global variables.\nDon't try this in a production project ! It fits into the category \"Bad practices\" !!\n\nGo to \"/imports/startup/server/index.js\" and type this in the source file:\n\n```js\nimport './nasty-globals.js'\n```\nNow, let's move over to \"/imports/startup/server/nasty-globals.js\":\n\n```js\nimport Donuts from '/imports/api/donuts/collection.js'\n```\n\nAs a reminder: because we used export default, when we import, we can import as any name:\n```js\n//import Any_Name_I_Want_Will_Have_The_Same_Effect from '/imports/api/donuts/collection.js'\nDonutsCollection = Donuts \n```\nBecause we did not use var, let, const before it, it's a global variable !\n\n## The Meteor console\nIn Meteor, we have at our disposal a console for the server side of the application.\nWe can use this for debugging purposes.\nTo use it, go to the file in which you have created your application, and open a terminal.\nType the following command into your terminal:\n```\nmeteor shell\n```\n\nThis will open a terminal from which you can test code snippets. The results of your test will not appear in the command prompt \nfrom which you started your terminal\n\n## Inserting data \nTo get a better idea about how data is inserted into MongoDB from Meteor, run the following code snippet in your Meteor Shell, after running your project:\n```js\nDonutsCollection.insert({\n    color: 'pinkish-green', \n    flavors: ['mustard', 'onions'], \n    price: 999.0, \n    expiresAt: new Date(),\n    isCommestible: false,\n    ratings: {\n        taste: 2,\n        awesomeness: 10,\n    }\n})\n```\n\nWe inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). The sky's the limit ! \n\n## Result\n\nAfter running the code snippet for data insertion in your Meteor shell, you will get the following output in the terminal window:\n```\n'MLx7SF79kXvAZuEyx'\n```\n\nThis represents the response we get from .insert() after inserting the data. This represents the newly created id. \n(Which is stored as _id in the Document in the database)\n\n\n## Finding data\nNow let's fetch all the the data related to our donuts from the database (we run this in Meteor shell):\n```js\nDonutsCollection.find()\n```\n\nIf you run this code snippet, you will get a bunch of data displayed into your Meteor shell.\nSo how was that accomplished ?\nWith a cursor! That involves using the methods find() and fetch(), about which we'll talk later!\n\n```js\nDonutsCollection.find().fetch()\n```\n\nLet's add another *donut* to our \"inventory\", so that we can do something more advanced with our data: \n```js\nDonutsCollection.insert({price: 50, isCommestible: true});\n```\nAs a tip, you should see an id in your shell. That way you know you did the tutorial right !\n\nNow let's search our database:\n```js\n// we only have to eat commestible donuts\nDonutsCollection.find({isCommestible: true}).fetch()\n\n// and we want to get the good stuf, even if it's expensive, so let's get the donuts with a price bigger than 200\nDonutsCollection.find({price: {$gt: 200}}).fetch()\n```\nTo be able to query MongoDB efficiently, you need to know some things about selectors.\nRead [this](https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators) to get acquainted with them.\n\nfind() also takes arguments, named \"options\":\n```js\nDonutsCollection.find({}, {\n    sort: {price: -1}, // sorts price in descending order\n    limit: 2, // limits the results to 2\n    fields: {price: 1, isCommestible: 1} // will only return the fields price and isCommestible\n}).fetch()\n```\n\nThere are other fields as well, but we don't want to get into the details just yet, and if you're as curious as we are, \nyou can read about them [here](http://docs.meteor.com/api/collections.html#Mongo-Collection-find).\n\n## Updating the data\n\nWhat about updating the data ?\nWell, it's so simple you won't believe it:\n```js\nDonutsCollection.update({price: 50}, {\n    $set: {price: 51}\n})\n```\n\nThe first argument represents the data that you \"want to update\", and the second tells the system \"how you update it\". \nYou can use arguments such as \"$inc\" for incrementing, \n\"$addToSet\" if you want to add another delicious ingredient in the \"flavors\" array.\n\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go [here](https://docs.mongodb.com/manual/reference/operator/update/).\n\n## Removing data\n\nRemoving data is easy, and the argument it takes to do it is what we want to remove:\n```js\nDonutsCollection.remove({price: {gt: 1000}})\n```\n\nKeep playing with the code, try new inserts, try new selectors. Have a little bit of fun! You deserve it!\n\nIf you have a MongoDB visualizer, like \"[Robomongo](https://robomongo.org/)\" for Ubuntu, or any other tools out [there](http://lmgtfy.com/?q=mongodb+admin+software),\nyou can connect to the database by using \"localhost\" and port 3001, when Meteor is started, and see how it works for yourself!\n\n\n## Tips and tricks\n\nYou can also find/update/remove by using the id as a string:\n```js\nDonutsCollection.update('XXX', modifier)\n// equivallent\nDonutsCollection.update({_id: 'XXX'}, modifier)\n```\n\n## Let's have some fun !\n\n#### 1. Help mr John\nMr John wants to find all donuts that have a price bigger than 200 and they have at least one flavor!\nHelp him with build a query! [Hint](https://docs.mongodb.com/manual/reference/operator/query/size/#op._S_size)\n\n#### 2. Price change\nIt's donut season. Run an update that increases all prices by 100, so you can make more profit! \n[Hint](https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc)\n\n#### 3. Reality hit\nPeople did not like the new prices, so create a query that will decrease the prices for the most 3 expensive \ndonuts by 10%. [Hint](https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul)\n\n\n\n\n\n\n\n\n","date":"2017-07-04T10:25:27.168Z","updated":"2017-07-04T10:25:27.168Z","path":"chapters/1/collections.html","_id":"ciure80fa0001qtjxsc1d0ona","comments":1,"layout":"page","content":"<h2 id=\"Let’s-talk-data\"><a href=\"#Let’s-talk-data\" class=\"headerlink\" title=\"Let’s talk data!\"></a>Let’s talk data!</h2><p>Meteor uses MongoDB as its default database system. Theoretically you can use any database you want, because\nyou have access to <em><a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a></em>, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a database). </p>\n<h2 id=\"Show-and-tell-comparison\"><a href=\"#Show-and-tell-comparison\" class=\"headerlink\" title=\"Show and tell comparison\"></a>Show and tell comparison</h2><p>Since everyone knows what MySQL is, let’s compare MongoDB with it, so you can better understand why it’s better for what we need. \nUnlike MySQL, in MongoDB you don’t have to CREATE TABLE, or CREATE FIELD in order to create a table or a field, because MongoDB \nlets you structure your data the way you want. You still however need consistency across your data, which is why, later on,\nwe will teach you how to ensure this consistency at an application level, not at the database level.</p>\n<p>Now we’d like to make some analogies, but you’re going to need to be familiar with the syntax of MySQL at a basic level.\nIf you’re not, read a little bit about it <a href=\"https://www.tutorialspoint.com/mysql/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>Now let’s make those analogies:</p>\n<ul>\n<li>DATABASE = Database (yes, the same name)</li>\n<li>TABLE = Collection (a list of data, a collection)</li>\n<li>ROW = Document (the actual list of data inside the collection)</li>\n</ul>\n<p>I like donuts…despite knowing that they’re unhealthy.\nI love donuts so much that I want to store them in a database !</p>\n<p>Firstly, let’s create a new file in the project file structure we created earlier, by running these commands in the \n/imports/api folder:\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> donuts</div><div class=\"line\"><span class=\"built_in\">cd</span> donuts</div><div class=\"line\">touch collection.js</div></pre></td></tr></table></figure></p>\n<p>Now let’s write some code in this file we have just created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'donuts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Donuts;</div></pre></td></tr></table></figure>\n<h2 id=\"Nasty-Globals\"><a href=\"#Nasty-Globals\" class=\"headerlink\" title=\"Nasty Globals\"></a>Nasty Globals</h2><p>So let’s start solving those errors,right ?\nSince our Donuts are isolated in their own module, we need to gain access to them. For that purpose, and only in this tutorial, we will use some very nasty global variables.\nDon’t try this in a production project ! It fits into the category “Bad practices” !!</p>\n<p>Go to “/imports/startup/server/index.js” and type this in the source file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./nasty-globals.js'</span></div></pre></td></tr></table></figure>\n<p>Now, let’s move over to “/imports/startup/server/nasty-globals.js”:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div></pre></td></tr></table></figure>\n<p>As a reminder: because we used export default, when we import, we can import as any name:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//import Any_Name_I_Want_Will_Have_The_Same_Effect from '/imports/api/donuts/collection.js'</span></div><div class=\"line\">DonutsCollection = Donuts</div></pre></td></tr></table></figure></p>\n<p>Because we did not use var, let, const before it, it’s a global variable !</p>\n<h2 id=\"The-Meteor-console\"><a href=\"#The-Meteor-console\" class=\"headerlink\" title=\"The Meteor console\"></a>The Meteor console</h2><p>In Meteor, we have at our disposal a console for the server side of the application.\nWe can use this for debugging purposes.\nTo use it, go to the file in which you have created your application, and open a terminal.\nType the following command into your terminal:\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div></pre></td></tr></table></figure></p>\n<p>This will open a terminal from which you can test code snippets. The results of your test will not appear in the command prompt \nfrom which you started your terminal</p>\n<h2 id=\"Inserting-data\"><a href=\"#Inserting-data\" class=\"headerlink\" title=\"Inserting data\"></a>Inserting data</h2><p>To get a better idea about how data is inserted into MongoDB from Meteor, run the following code snippet in your Meteor Shell, after running your project:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'pinkish-green'</span>, </div><div class=\"line\">    <span class=\"attr\">flavors</span>: [<span class=\"string\">'mustard'</span>, <span class=\"string\">'onions'</span>], </div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"number\">999.0</span>, </div><div class=\"line\">    <span class=\"attr\">expiresAt</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    <span class=\"attr\">isCommestible</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">ratings</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">taste</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">awesomeness</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). The sky’s the limit ! </p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>After running the code snippet for data insertion in your Meteor shell, you will get the following output in the terminal window:\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">'MLx7SF79kXvAZuEyx</span>'</div></pre></td></tr></table></figure></p>\n<p>This represents the response we get from .insert() after inserting the data. This represents the newly created id. \n(Which is stored as _id in the Document in the database)</p>\n<h2 id=\"Finding-data\"><a href=\"#Finding-data\" class=\"headerlink\" title=\"Finding data\"></a>Finding data</h2><p>Now let’s fetch all the the data related to our donuts from the database (we run this in Meteor shell):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find()</div></pre></td></tr></table></figure></p>\n<p>If you run this code snippet, you will get a bunch of data displayed into your Meteor shell.\nSo how was that accomplished ?\nWith a cursor! That involves using the methods find() and fetch(), about which we’ll talk later!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure>\n<p>Let’s add another <em>donut</em> to our “inventory”, so that we can do something more advanced with our data: \n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">50</span>, <span class=\"attr\">isCommestible</span>: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>As a tip, you should see an id in your shell. That way you know you did the tutorial right !</p>\n<p>Now let’s search our database:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we only have to eat commestible donuts</span></div><div class=\"line\">DonutsCollection.find(&#123;<span class=\"attr\">isCommestible</span>: <span class=\"literal\">true</span>&#125;).fetch()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// and we want to get the good stuf, even if it's expensive, so let's get the donuts with a price bigger than 200</span></div><div class=\"line\">DonutsCollection.find(&#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">$gt</span>: <span class=\"number\">200</span>&#125;&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>To be able to query MongoDB efficiently, you need to know some things about selectors.\nRead <a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\" target=\"_blank\" rel=\"external\">this</a> to get acquainted with them.</p>\n<p>find() also takes arguments, named “options”:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find(&#123;&#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">sort</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">-1</span>&#125;, <span class=\"comment\">// sorts price in descending order</span></div><div class=\"line\">    limit: <span class=\"number\">2</span>, <span class=\"comment\">// limits the results to 2</span></div><div class=\"line\">    fields: &#123;<span class=\"attr\">price</span>: <span class=\"number\">1</span>, <span class=\"attr\">isCommestible</span>: <span class=\"number\">1</span>&#125; <span class=\"comment\">// will only return the fields price and isCommestible</span></div><div class=\"line\">&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>There are other fields as well, but we don’t want to get into the details just yet, and if you’re as curious as we are, \nyou can read about them <a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection-find\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Updating-the-data\"><a href=\"#Updating-the-data\" class=\"headerlink\" title=\"Updating the data\"></a>Updating the data</h2><p>What about updating the data ?\nWell, it’s so simple you won’t believe it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.update(&#123;<span class=\"attr\">price</span>: <span class=\"number\">50</span>&#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">$set</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">51</span>&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>The first argument represents the data that you “want to update”, and the second tells the system “how you update it”. \nYou can use arguments such as “$inc” for incrementing, \n“$addToSet” if you want to add another delicious ingredient in the “flavors” array.</p>\n<p>The idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go <a href=\"https://docs.mongodb.com/manual/reference/operator/update/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Removing-data\"><a href=\"#Removing-data\" class=\"headerlink\" title=\"Removing data\"></a>Removing data</h2><p>Removing data is easy, and the argument it takes to do it is what we want to remove:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.remove(&#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">1000</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>Keep playing with the code, try new inserts, try new selectors. Have a little bit of fun! You deserve it!</p>\n<p>If you have a MongoDB visualizer, like “<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">Robomongo</a>“ for Ubuntu, or any other tools out <a href=\"http://lmgtfy.com/?q=mongodb+admin+software\" target=\"_blank\" rel=\"external\">there</a>,\nyou can connect to the database by using “localhost” and port 3001, when Meteor is started, and see how it works for yourself!</p>\n<h2 id=\"Tips-and-tricks\"><a href=\"#Tips-and-tricks\" class=\"headerlink\" title=\"Tips and tricks\"></a>Tips and tricks</h2><p>You can also find/update/remove by using the id as a string:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.update(<span class=\"string\">'XXX'</span>, modifier)</div><div class=\"line\"><span class=\"comment\">// equivallent</span></div><div class=\"line\">DonutsCollection.update(&#123;<span class=\"attr\">_id</span>: <span class=\"string\">'XXX'</span>&#125;, modifier)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Let’s-have-some-fun\"><a href=\"#Let’s-have-some-fun\" class=\"headerlink\" title=\"Let’s have some fun !\"></a>Let’s have some fun !</h2><h4 id=\"1-Help-mr-John\"><a href=\"#1-Help-mr-John\" class=\"headerlink\" title=\"1. Help mr John\"></a>1. Help mr John</h4><p>Mr John wants to find all donuts that have a price bigger than 200 and they have at least one flavor!\nHelp him with build a query! <a href=\"https://docs.mongodb.com/manual/reference/operator/query/size/#op._S_size\" target=\"_blank\" rel=\"external\">Hint</a></p>\n<h4 id=\"2-Price-change\"><a href=\"#2-Price-change\" class=\"headerlink\" title=\"2. Price change\"></a>2. Price change</h4><p>It’s donut season. Run an update that increases all prices by 100, so you can make more profit! \n<a href=\"https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc\" target=\"_blank\" rel=\"external\">Hint</a></p>\n<h4 id=\"3-Reality-hit\"><a href=\"#3-Reality-hit\" class=\"headerlink\" title=\"3. Reality hit\"></a>3. Reality hit</h4><p>People did not like the new prices, so create a query that will decrease the prices for the most 3 expensive \ndonuts by 10%. <a href=\"https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul\" target=\"_blank\" rel=\"external\">Hint</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Let’s-talk-data\"><a href=\"#Let’s-talk-data\" class=\"headerlink\" title=\"Let’s talk data!\"></a>Let’s talk data!</h2><p>Meteor uses MongoDB as its default database system. Theoretically you can use any database you want, because\nyou have access to <em><a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a></em>, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a database). </p>\n<h2 id=\"Show-and-tell-comparison\"><a href=\"#Show-and-tell-comparison\" class=\"headerlink\" title=\"Show and tell comparison\"></a>Show and tell comparison</h2><p>Since everyone knows what MySQL is, let’s compare MongoDB with it, so you can better understand why it’s better for what we need. \nUnlike MySQL, in MongoDB you don’t have to CREATE TABLE, or CREATE FIELD in order to create a table or a field, because MongoDB \nlets you structure your data the way you want. You still however need consistency across your data, which is why, later on,\nwe will teach you how to ensure this consistency at an application level, not at the database level.</p>\n<p>Now we’d like to make some analogies, but you’re going to need to be familiar with the syntax of MySQL at a basic level.\nIf you’re not, read a little bit about it <a href=\"https://www.tutorialspoint.com/mysql/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>Now let’s make those analogies:</p>\n<ul>\n<li>DATABASE = Database (yes, the same name)</li>\n<li>TABLE = Collection (a list of data, a collection)</li>\n<li>ROW = Document (the actual list of data inside the collection)</li>\n</ul>\n<p>I like donuts…despite knowing that they’re unhealthy.\nI love donuts so much that I want to store them in a database !</p>\n<p>Firstly, let’s create a new file in the project file structure we created earlier, by running these commands in the \n/imports/api folder:\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> donuts</div><div class=\"line\"><span class=\"built_in\">cd</span> donuts</div><div class=\"line\">touch collection.js</div></pre></td></tr></table></figure></p>\n<p>Now let’s write some code in this file we have just created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'donuts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Donuts;</div></pre></td></tr></table></figure>\n<h2 id=\"Nasty-Globals\"><a href=\"#Nasty-Globals\" class=\"headerlink\" title=\"Nasty Globals\"></a>Nasty Globals</h2><p>So let’s start solving those errors,right ?\nSince our Donuts are isolated in their own module, we need to gain access to them. For that purpose, and only in this tutorial, we will use some very nasty global variables.\nDon’t try this in a production project ! It fits into the category “Bad practices” !!</p>\n<p>Go to “/imports/startup/server/index.js” and type this in the source file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./nasty-globals.js'</span></div></pre></td></tr></table></figure>\n<p>Now, let’s move over to “/imports/startup/server/nasty-globals.js”:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div></pre></td></tr></table></figure>\n<p>As a reminder: because we used export default, when we import, we can import as any name:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//import Any_Name_I_Want_Will_Have_The_Same_Effect from '/imports/api/donuts/collection.js'</span></div><div class=\"line\">DonutsCollection = Donuts</div></pre></td></tr></table></figure></p>\n<p>Because we did not use var, let, const before it, it’s a global variable !</p>\n<h2 id=\"The-Meteor-console\"><a href=\"#The-Meteor-console\" class=\"headerlink\" title=\"The Meteor console\"></a>The Meteor console</h2><p>In Meteor, we have at our disposal a console for the server side of the application.\nWe can use this for debugging purposes.\nTo use it, go to the file in which you have created your application, and open a terminal.\nType the following command into your terminal:\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div></pre></td></tr></table></figure></p>\n<p>This will open a terminal from which you can test code snippets. The results of your test will not appear in the command prompt \nfrom which you started your terminal</p>\n<h2 id=\"Inserting-data\"><a href=\"#Inserting-data\" class=\"headerlink\" title=\"Inserting data\"></a>Inserting data</h2><p>To get a better idea about how data is inserted into MongoDB from Meteor, run the following code snippet in your Meteor Shell, after running your project:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'pinkish-green'</span>, </div><div class=\"line\">    <span class=\"attr\">flavors</span>: [<span class=\"string\">'mustard'</span>, <span class=\"string\">'onions'</span>], </div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"number\">999.0</span>, </div><div class=\"line\">    <span class=\"attr\">expiresAt</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    <span class=\"attr\">isCommestible</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">ratings</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">taste</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">awesomeness</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). The sky’s the limit ! </p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>After running the code snippet for data insertion in your Meteor shell, you will get the following output in the terminal window:\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">'MLx7SF79kXvAZuEyx</span>'</div></pre></td></tr></table></figure></p>\n<p>This represents the response we get from .insert() after inserting the data. This represents the newly created id. \n(Which is stored as _id in the Document in the database)</p>\n<h2 id=\"Finding-data\"><a href=\"#Finding-data\" class=\"headerlink\" title=\"Finding data\"></a>Finding data</h2><p>Now let’s fetch all the the data related to our donuts from the database (we run this in Meteor shell):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find()</div></pre></td></tr></table></figure></p>\n<p>If you run this code snippet, you will get a bunch of data displayed into your Meteor shell.\nSo how was that accomplished ?\nWith a cursor! That involves using the methods find() and fetch(), about which we’ll talk later!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure>\n<p>Let’s add another <em>donut</em> to our “inventory”, so that we can do something more advanced with our data: \n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">50</span>, <span class=\"attr\">isCommestible</span>: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>As a tip, you should see an id in your shell. That way you know you did the tutorial right !</p>\n<p>Now let’s search our database:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we only have to eat commestible donuts</span></div><div class=\"line\">DonutsCollection.find(&#123;<span class=\"attr\">isCommestible</span>: <span class=\"literal\">true</span>&#125;).fetch()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// and we want to get the good stuf, even if it's expensive, so let's get the donuts with a price bigger than 200</span></div><div class=\"line\">DonutsCollection.find(&#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">$gt</span>: <span class=\"number\">200</span>&#125;&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>To be able to query MongoDB efficiently, you need to know some things about selectors.\nRead <a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\" target=\"_blank\" rel=\"external\">this</a> to get acquainted with them.</p>\n<p>find() also takes arguments, named “options”:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.find(&#123;&#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">sort</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">-1</span>&#125;, <span class=\"comment\">// sorts price in descending order</span></div><div class=\"line\">    limit: <span class=\"number\">2</span>, <span class=\"comment\">// limits the results to 2</span></div><div class=\"line\">    fields: &#123;<span class=\"attr\">price</span>: <span class=\"number\">1</span>, <span class=\"attr\">isCommestible</span>: <span class=\"number\">1</span>&#125; <span class=\"comment\">// will only return the fields price and isCommestible</span></div><div class=\"line\">&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>There are other fields as well, but we don’t want to get into the details just yet, and if you’re as curious as we are, \nyou can read about them <a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection-find\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Updating-the-data\"><a href=\"#Updating-the-data\" class=\"headerlink\" title=\"Updating the data\"></a>Updating the data</h2><p>What about updating the data ?\nWell, it’s so simple you won’t believe it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.update(&#123;<span class=\"attr\">price</span>: <span class=\"number\">50</span>&#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">$set</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">51</span>&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>The first argument represents the data that you “want to update”, and the second tells the system “how you update it”. \nYou can use arguments such as “$inc” for incrementing, \n“$addToSet” if you want to add another delicious ingredient in the “flavors” array.</p>\n<p>The idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go <a href=\"https://docs.mongodb.com/manual/reference/operator/update/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Removing-data\"><a href=\"#Removing-data\" class=\"headerlink\" title=\"Removing data\"></a>Removing data</h2><p>Removing data is easy, and the argument it takes to do it is what we want to remove:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.remove(&#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">1000</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>Keep playing with the code, try new inserts, try new selectors. Have a little bit of fun! You deserve it!</p>\n<p>If you have a MongoDB visualizer, like “<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">Robomongo</a>“ for Ubuntu, or any other tools out <a href=\"http://lmgtfy.com/?q=mongodb+admin+software\" target=\"_blank\" rel=\"external\">there</a>,\nyou can connect to the database by using “localhost” and port 3001, when Meteor is started, and see how it works for yourself!</p>\n<h2 id=\"Tips-and-tricks\"><a href=\"#Tips-and-tricks\" class=\"headerlink\" title=\"Tips and tricks\"></a>Tips and tricks</h2><p>You can also find/update/remove by using the id as a string:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.update(<span class=\"string\">'XXX'</span>, modifier)</div><div class=\"line\"><span class=\"comment\">// equivallent</span></div><div class=\"line\">DonutsCollection.update(&#123;<span class=\"attr\">_id</span>: <span class=\"string\">'XXX'</span>&#125;, modifier)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Let’s-have-some-fun\"><a href=\"#Let’s-have-some-fun\" class=\"headerlink\" title=\"Let’s have some fun !\"></a>Let’s have some fun !</h2><h4 id=\"1-Help-mr-John\"><a href=\"#1-Help-mr-John\" class=\"headerlink\" title=\"1. Help mr John\"></a>1. Help mr John</h4><p>Mr John wants to find all donuts that have a price bigger than 200 and they have at least one flavor!\nHelp him with build a query! <a href=\"https://docs.mongodb.com/manual/reference/operator/query/size/#op._S_size\" target=\"_blank\" rel=\"external\">Hint</a></p>\n<h4 id=\"2-Price-change\"><a href=\"#2-Price-change\" class=\"headerlink\" title=\"2. Price change\"></a>2. Price change</h4><p>It’s donut season. Run an update that increases all prices by 100, so you can make more profit! \n<a href=\"https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc\" target=\"_blank\" rel=\"external\">Hint</a></p>\n<h4 id=\"3-Reality-hit\"><a href=\"#3-Reality-hit\" class=\"headerlink\" title=\"3. Reality hit\"></a>3. Reality hit</h4><p>People did not like the new prices, so create a query that will decrease the prices for the most 3 expensive \ndonuts by 10%. <a href=\"https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul\" target=\"_blank\" rel=\"external\">Hint</a></p>\n"},{"title":"Methods","description":"The RPC of Meteor.","disqusPage":"Chapter 1: Methods","_content":"\n## RPC's - a way to express yourself\n\nWell, you probably already ask yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. \n\nFirst of all, RPC stands for \"Remote Procedure Call\", which basically means that you invoke \"something\" with some arguments ( only if you want to use arguments, of course).\nThen you expect a response, just like you would do when in a conversation. If you get an error, then your \"conversation\" might not be so productive, so check your code :).\n\nHaving a conversation in Meteor is quite simple.\nIn Meteor, the usual way of doing this, and the best, is by communicating through a websocket with the server. \nif you disable websockets, it falls back to something else, which we won't talk about in this tutorial\n\nSo what actions we can do in our \"conversations\" with RPC's ?\n- Fetching data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Anything you can possibly think of\n\nMethods are created server-side, and they can be called from the client or from the server as well.\nIn the `meteor shell`, since we've already established where it is located, it means we are calling RPC's from the server.\n\nWe can also have methods on the client-side, which can be used for Optimistic UI, something we won't be discussing.\n\n\n## Let's create a method( or RPC)\nLet's keep using the sample application we created at the beginning of the tutorial (  yes, i still love donuts! ), and in the file *imports/api/donuts/methods.js* we'll write:\n\n```\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        return Donuts.insert({price: 100})\n    }\n})\n```\n\n## Now...how to use it ?\n\nMethods can be called from the server-side or from the client-side. Let's try it first in the *meteor shell*:\n\n```js\nMeteor.call('create_a_donut')\n```\n\nBANG!\nAnother error ! But we've already dealt with errors before, so fear not...you caninux shutd do this ! \n```\nError: Method 'create_a_donut' not found [404]\n```\n\nMeteor has basically no idea that the method you just wrote exists. So you just created a file inside imports, but there is absolutely no link to it.\nSo, as a golden rule, if you don't create a link to your file, it's just as ineffective as if it wouldn't exist.\n\nHow do you create such a link ?\nWell, in the \"/imports/startup/server/index.js\" file, import the methods.js file:\n```js\nimport '/imports/api/donuts/methods.js';\n```\n\nNow let the server restart itself ( it does that when you change the code in your application ).\nAfter calling the method in the *meteor shell*, it will respond to you with a message that looks like this:\n```\n> Meteor.call('create_a_donut')\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because of this line:\n ```js\n return Donuts.insert({price: 100})\n  ```\nLet's ignore the \"return\" part for now and focus on the \"insert\" for a little bit.\nWith \"insert()\", we just inserted content into the database. As a consequence, the occurrence of this operation will determine the system\nto \"spit out\"  the newly created _id, thus giving us a way of identifying the operation.\nNow let's get back to the \"return()\" part !\nWhat you return in the method body is returned to the caller. \nYou can return anything you want: objects, arrays, strings, dates, and, you guessed it-id's !\nIn the background, the data is serialized to the [EJSON](http://docs.meteor.com/api/ejson.html) format, then deserialized where it's called.\n\nNow let's view the results of our work in the browser.\nOpen your web browser and navigate to *http://localhost:3000* .\nNow open your browser's console by typing Ctrl+Shift+I in Google Chrome. \nWe recommend Google Chrome, as it is the best, but feel free to test into other browsers as well.\nIt might even give you some perspective as to how you could optimize an application to work well with multiple browsers !\n\n```js\nMeteor.call('create_a_donut')\n```\n\nThat's weird...nothing happened. \nLet's check the database. What's going on ?\n\nWell, when you make a call from the client, you can't get the answer instantly, because your call initiates a \"conversation\" through a [websocket](https://en.wikipedia.org/wiki/WebSocket) with the server.\nThen, the server needs to complete the operation you requested in that call and \"get back to you\" with the results.\nThis operation can take few milliseconds, which is why we need to provide a [callback](https://en.wikipedia.org/wiki/Callback_(computer_programming)) to our method:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n     console.log(res);\n})\n```\n\nNow it works, but why did we use \"err\" ?  \nYou will find an explanation [here](http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/).\n\n## Errors in methods\n\nIf you try using `console.log(err)` in *Meteor Shell*, you will see that it's undefined. Because the server did not throw any error while handling your method.\n\nLet's cause an error and see what happens:\nType this code in the *imports/api/donuts/methods.js* file:\n```js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        throw \"I don't wanna!\"; // notice that the \"throw\" statement accepts any type of argument, not just strings\n    }\n})\n```\n\nNow if we call the method we just created in the shell ( \"initiate a conversation with the server\", if you want to call it like that):\n```js\nMeteor.call('create_a_donut')\n```\n\nWe'll get a response in the form of a string containing the error message. \nThis doesn't help us very much, since we don't know if it's an actual response or an error. \nHowever, we ave another way for solving this, as we have at our disposal server-side callbacks as well:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n    console.log(err, res);\n})\n```\n\nNow let's move to the client for a little bit. The reason we have to do this, and the reason for which we have been dealing with errors since the beginning is\n because, while working on projects you'll encounter a lot of errors and identifying and treating them is a critical part of being a good web developer.\n\nAfter making the same operations we did on the server, to the client, you should get a response that looks like this:\n```js\nerrorClass {\n    details: undefined\n    error: 500\n    errorType: \"Meteor.Error\"\n    message: \"Internal server error [500]\"\n    reason: \"Internal server error\"\n}\n```\n\nThat's not very helpful, is it ? It' doesn't help you identify the error, nor does it give you tips about solving the error, unlike the message from the server.\n\nThis is why, in order to make the errors that originate from the client descriptive and comprehensive, we need to use [Meteor.Error](https://docs.meteor.com/api/methods.html#Meteor-Error)\n\n```js\nMeteor.methods({\n    'create_a_donut': function () {\n        throw new Meteor.Error('error', 'I do not really want it', {\n            why: \"I have eaten too many\"\n        });\n        // The first argument (error): is something very general, can be a number like 500, 404, \n        // The second argument (reason): is a description of the error\n        // The third argument (details): is for providing more details about the error.\n    }\n})\n```\n\nNow, if you do the call on the client:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n    if (err) {\n        console.log('There was an error: ', err);\n        // in err object you have to (err.error, err.reason, err.details)\n    } else {\n        console.log('Wooho! No Errors');\n    }\n})\n```\n\nSo, from now on, to make errors comprehensible everywhere, use *Meteor.Error* for throwing exceptions.\n\n## Arguments for our methods\n\nJust like in a normal conversation, in which you have to use arguments, methods can receive arguments of any kind !\n\n```js\n// server\nMeteor.methods({\n    'create_a_donut': function (one, two, three) {\n        return [one, two, three];\n    }\n})\n\n// client or server\nMeteor.call('create_a_donut', 'One', 'Two', {three: 'Arguments'}, function (err, res) {\n    console.log(res);\n})\n```\n\nThe fact that we can now use arguments with methods opens a world of possibilities to us. But this can make methods fairly complex, \nwhich is why, during the course of this tutorial, we will talk some more about methods.\n\n## Work more to learn more\n\nNow let's practice what we've learned in this section with a few simple exercises:\n\n#### 1. Get me all the donuts\nTry out this code, to get all the donuts from the database :\n```js\nMeteor.call('donuts.list', callback)\n```\n\n#### 2. Give me some donuts\nTry out this code snippet, to get some donuts ( after all, moderation is good when consuming sweets):\n```js\nMeteor.call('donuts.list_filtered', {price: {$gt: 200}, callback)\n```\n\n#### 3. Updating\nTest yourself !\nCreate a method that takes two arguments, *_id* and *data*, and *$set*s the data for the donut with that _id.\n\n```js\nMeteor.call('donuts.list_filtered', donutId, {price: 1000})\n```\n\n","source":"chapters/1/methods.md","raw":"---\ntitle: Methods\ndescription: The RPC of Meteor.\ndisqusPage: 'Chapter 1: Methods'\n---\n\n## RPC's - a way to express yourself\n\nWell, you probably already ask yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. \n\nFirst of all, RPC stands for \"Remote Procedure Call\", which basically means that you invoke \"something\" with some arguments ( only if you want to use arguments, of course).\nThen you expect a response, just like you would do when in a conversation. If you get an error, then your \"conversation\" might not be so productive, so check your code :).\n\nHaving a conversation in Meteor is quite simple.\nIn Meteor, the usual way of doing this, and the best, is by communicating through a websocket with the server. \nif you disable websockets, it falls back to something else, which we won't talk about in this tutorial\n\nSo what actions we can do in our \"conversations\" with RPC's ?\n- Fetching data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Anything you can possibly think of\n\nMethods are created server-side, and they can be called from the client or from the server as well.\nIn the `meteor shell`, since we've already established where it is located, it means we are calling RPC's from the server.\n\nWe can also have methods on the client-side, which can be used for Optimistic UI, something we won't be discussing.\n\n\n## Let's create a method( or RPC)\nLet's keep using the sample application we created at the beginning of the tutorial (  yes, i still love donuts! ), and in the file *imports/api/donuts/methods.js* we'll write:\n\n```\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        return Donuts.insert({price: 100})\n    }\n})\n```\n\n## Now...how to use it ?\n\nMethods can be called from the server-side or from the client-side. Let's try it first in the *meteor shell*:\n\n```js\nMeteor.call('create_a_donut')\n```\n\nBANG!\nAnother error ! But we've already dealt with errors before, so fear not...you caninux shutd do this ! \n```\nError: Method 'create_a_donut' not found [404]\n```\n\nMeteor has basically no idea that the method you just wrote exists. So you just created a file inside imports, but there is absolutely no link to it.\nSo, as a golden rule, if you don't create a link to your file, it's just as ineffective as if it wouldn't exist.\n\nHow do you create such a link ?\nWell, in the \"/imports/startup/server/index.js\" file, import the methods.js file:\n```js\nimport '/imports/api/donuts/methods.js';\n```\n\nNow let the server restart itself ( it does that when you change the code in your application ).\nAfter calling the method in the *meteor shell*, it will respond to you with a message that looks like this:\n```\n> Meteor.call('create_a_donut')\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because of this line:\n ```js\n return Donuts.insert({price: 100})\n  ```\nLet's ignore the \"return\" part for now and focus on the \"insert\" for a little bit.\nWith \"insert()\", we just inserted content into the database. As a consequence, the occurrence of this operation will determine the system\nto \"spit out\"  the newly created _id, thus giving us a way of identifying the operation.\nNow let's get back to the \"return()\" part !\nWhat you return in the method body is returned to the caller. \nYou can return anything you want: objects, arrays, strings, dates, and, you guessed it-id's !\nIn the background, the data is serialized to the [EJSON](http://docs.meteor.com/api/ejson.html) format, then deserialized where it's called.\n\nNow let's view the results of our work in the browser.\nOpen your web browser and navigate to *http://localhost:3000* .\nNow open your browser's console by typing Ctrl+Shift+I in Google Chrome. \nWe recommend Google Chrome, as it is the best, but feel free to test into other browsers as well.\nIt might even give you some perspective as to how you could optimize an application to work well with multiple browsers !\n\n```js\nMeteor.call('create_a_donut')\n```\n\nThat's weird...nothing happened. \nLet's check the database. What's going on ?\n\nWell, when you make a call from the client, you can't get the answer instantly, because your call initiates a \"conversation\" through a [websocket](https://en.wikipedia.org/wiki/WebSocket) with the server.\nThen, the server needs to complete the operation you requested in that call and \"get back to you\" with the results.\nThis operation can take few milliseconds, which is why we need to provide a [callback](https://en.wikipedia.org/wiki/Callback_(computer_programming)) to our method:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n     console.log(res);\n})\n```\n\nNow it works, but why did we use \"err\" ?  \nYou will find an explanation [here](http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/).\n\n## Errors in methods\n\nIf you try using `console.log(err)` in *Meteor Shell*, you will see that it's undefined. Because the server did not throw any error while handling your method.\n\nLet's cause an error and see what happens:\nType this code in the *imports/api/donuts/methods.js* file:\n```js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        throw \"I don't wanna!\"; // notice that the \"throw\" statement accepts any type of argument, not just strings\n    }\n})\n```\n\nNow if we call the method we just created in the shell ( \"initiate a conversation with the server\", if you want to call it like that):\n```js\nMeteor.call('create_a_donut')\n```\n\nWe'll get a response in the form of a string containing the error message. \nThis doesn't help us very much, since we don't know if it's an actual response or an error. \nHowever, we ave another way for solving this, as we have at our disposal server-side callbacks as well:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n    console.log(err, res);\n})\n```\n\nNow let's move to the client for a little bit. The reason we have to do this, and the reason for which we have been dealing with errors since the beginning is\n because, while working on projects you'll encounter a lot of errors and identifying and treating them is a critical part of being a good web developer.\n\nAfter making the same operations we did on the server, to the client, you should get a response that looks like this:\n```js\nerrorClass {\n    details: undefined\n    error: 500\n    errorType: \"Meteor.Error\"\n    message: \"Internal server error [500]\"\n    reason: \"Internal server error\"\n}\n```\n\nThat's not very helpful, is it ? It' doesn't help you identify the error, nor does it give you tips about solving the error, unlike the message from the server.\n\nThis is why, in order to make the errors that originate from the client descriptive and comprehensive, we need to use [Meteor.Error](https://docs.meteor.com/api/methods.html#Meteor-Error)\n\n```js\nMeteor.methods({\n    'create_a_donut': function () {\n        throw new Meteor.Error('error', 'I do not really want it', {\n            why: \"I have eaten too many\"\n        });\n        // The first argument (error): is something very general, can be a number like 500, 404, \n        // The second argument (reason): is a description of the error\n        // The third argument (details): is for providing more details about the error.\n    }\n})\n```\n\nNow, if you do the call on the client:\n\n```js\nMeteor.call('create_a_donut', function (err, res) {\n    if (err) {\n        console.log('There was an error: ', err);\n        // in err object you have to (err.error, err.reason, err.details)\n    } else {\n        console.log('Wooho! No Errors');\n    }\n})\n```\n\nSo, from now on, to make errors comprehensible everywhere, use *Meteor.Error* for throwing exceptions.\n\n## Arguments for our methods\n\nJust like in a normal conversation, in which you have to use arguments, methods can receive arguments of any kind !\n\n```js\n// server\nMeteor.methods({\n    'create_a_donut': function (one, two, three) {\n        return [one, two, three];\n    }\n})\n\n// client or server\nMeteor.call('create_a_donut', 'One', 'Two', {three: 'Arguments'}, function (err, res) {\n    console.log(res);\n})\n```\n\nThe fact that we can now use arguments with methods opens a world of possibilities to us. But this can make methods fairly complex, \nwhich is why, during the course of this tutorial, we will talk some more about methods.\n\n## Work more to learn more\n\nNow let's practice what we've learned in this section with a few simple exercises:\n\n#### 1. Get me all the donuts\nTry out this code, to get all the donuts from the database :\n```js\nMeteor.call('donuts.list', callback)\n```\n\n#### 2. Give me some donuts\nTry out this code snippet, to get some donuts ( after all, moderation is good when consuming sweets):\n```js\nMeteor.call('donuts.list_filtered', {price: {$gt: 200}, callback)\n```\n\n#### 3. Updating\nTest yourself !\nCreate a method that takes two arguments, *_id* and *data*, and *$set*s the data for the donut with that _id.\n\n```js\nMeteor.call('donuts.list_filtered', donutId, {price: 1000})\n```\n\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/methods.html","_id":"ciurfdnnz0002qtjx635uz520","comments":1,"layout":"page","content":"<h2 id=\"RPC’s-a-way-to-express-yourself\"><a href=\"#RPC’s-a-way-to-express-yourself\" class=\"headerlink\" title=\"RPC’s - a way to express yourself\"></a>RPC’s - a way to express yourself</h2><p>Well, you probably already ask yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. </p>\n<p>First of all, RPC stands for “Remote Procedure Call”, which basically means that you invoke “something” with some arguments ( only if you want to use arguments, of course).\nThen you expect a response, just like you would do when in a conversation. If you get an error, then your “conversation” might not be so productive, so check your code :).</p>\n<p>Having a conversation in Meteor is quite simple.\nIn Meteor, the usual way of doing this, and the best, is by communicating through a websocket with the server. \nif you disable websockets, it falls back to something else, which we won’t talk about in this tutorial</p>\n<p>So what actions we can do in our “conversations” with RPC’s ?</p>\n<ul>\n<li>Fetching data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Anything you can possibly think of</li>\n</ul>\n<p>Methods are created server-side, and they can be called from the client or from the server as well.\nIn the <code>meteor shell</code>, since we’ve already established where it is located, it means we are calling RPC’s from the server.</p>\n<p>We can also have methods on the client-side, which can be used for Optimistic UI, something we won’t be discussing.</p>\n<h2 id=\"Let’s-create-a-method-or-RPC\"><a href=\"#Let’s-create-a-method-or-RPC\" class=\"headerlink\" title=\"Let’s create a method( or RPC)\"></a>Let’s create a method( or RPC)</h2><p>Let’s keep using the sample application we created at the beginning of the tutorial (  yes, i still love donuts! ), and in the file <em>imports/api/donuts/methods.js</em> we’ll write:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Now…how-to-use-it\"><a href=\"#Now…how-to-use-it\" class=\"headerlink\" title=\"Now…how to use it ?\"></a>Now…how to use it ?</h2><p>Methods can be called from the server-side or from the client-side. Let’s try it first in the <em>meteor shell</em>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>BANG!\nAnother error ! But we’ve already dealt with errors before, so fear not…you caninux shutd do this ! \n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: <span class=\"function\"><span class=\"keyword\">Method</span> '<span class=\"title\">create_a_donut</span>' <span class=\"title\">not</span> <span class=\"title\">found</span> [404]</span></div></pre></td></tr></table></figure></p>\n<p>Meteor has basically no idea that the method you just wrote exists. So you just created a file inside imports, but there is absolutely no link to it.\nSo, as a golden rule, if you don’t create a link to your file, it’s just as ineffective as if it wouldn’t exist.</p>\n<p>How do you create such a link ?\nWell, in the “/imports/startup/server/index.js” file, import the methods.js file:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/imports/api/donuts/methods.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>Now let the server restart itself ( it does that when you change the code in your application ).\nAfter calling the method in the <em>meteor shell</em>, it will respond to you with a message that looks like this:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div><div class=\"line\"><span class=\"string\">'MLx7SF79kXvAZuEyx'</span></div></pre></td></tr></table></figure></p>\n<p>That’s because of this line:\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>Let’s ignore the “return” part for now and focus on the “insert” for a little bit.\nWith “insert()”, we just inserted content into the database. As a consequence, the occurrence of this operation will determine the system\nto “spit out”  the newly created _id, thus giving us a way of identifying the operation.\nNow let’s get back to the “return()” part !\nWhat you return in the method body is returned to the caller. \nYou can return anything you want: objects, arrays, strings, dates, and, you guessed it-id’s !\nIn the background, the data is serialized to the <a href=\"http://docs.meteor.com/api/ejson.html\" target=\"_blank\" rel=\"external\">EJSON</a> format, then deserialized where it’s called.</p>\n<p>Now let’s view the results of our work in the browser.\nOpen your web browser and navigate to <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></em> .\nNow open your browser’s console by typing Ctrl+Shift+I in Google Chrome. \nWe recommend Google Chrome, as it is the best, but feel free to test into other browsers as well.\nIt might even give you some perspective as to how you could optimize an application to work well with multiple browsers !</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>That’s weird…nothing happened. \nLet’s check the database. What’s going on ?</p>\n<p>Well, when you make a call from the client, you can’t get the answer instantly, because your call initiates a “conversation” through a <a href=\"https://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"external\">websocket</a> with the server.\nThen, the server needs to complete the operation you requested in that call and “get back to you” with the results.\nThis operation can take few milliseconds, which is why we need to provide a <a href=\"https://en.wikipedia.org/wiki/Callback_(computer_programming\" target=\"_blank\" rel=\"external\">callback</a>) to our method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now it works, but why did we use “err” ?<br>You will find an explanation <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Errors-in-methods\"><a href=\"#Errors-in-methods\" class=\"headerlink\" title=\"Errors in methods\"></a>Errors in methods</h2><p>If you try using <code>console.log(err)</code> in <em>Meteor Shell</em>, you will see that it’s undefined. Because the server did not throw any error while handling your method.</p>\n<p>Let’s cause an error and see what happens:\nType this code in the <em>imports/api/donuts/methods.js</em> file:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"I don't wanna!\"</span>; <span class=\"comment\">// notice that the \"throw\" statement accepts any type of argument, not just strings</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now if we call the method we just created in the shell ( “initiate a conversation with the server”, if you want to call it like that):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure></p>\n<p>We’ll get a response in the form of a string containing the error message. \nThis doesn’t help us very much, since we don’t know if it’s an actual response or an error. \nHowever, we ave another way for solving this, as we have at our disposal server-side callbacks as well:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now let’s move to the client for a little bit. The reason we have to do this, and the reason for which we have been dealing with errors since the beginning is\n because, while working on projects you’ll encounter a lot of errors and identifying and treating them is a critical part of being a good web developer.</p>\n<p>After making the same operations we did on the server, to the client, you should get a response that looks like this:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">errorClass &#123;</div><div class=\"line\">    <span class=\"attr\">details</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">    error: <span class=\"number\">500</span></div><div class=\"line\">    errorType: <span class=\"string\">\"Meteor.Error\"</span></div><div class=\"line\">    message: <span class=\"string\">\"Internal server error [500]\"</span></div><div class=\"line\">    reason: <span class=\"string\">\"Internal server error\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>That’s not very helpful, is it ? It’ doesn’t help you identify the error, nor does it give you tips about solving the error, unlike the message from the server.</p>\n<p>This is why, in order to make the errors that originate from the client descriptive and comprehensive, we need to use <a href=\"https://docs.meteor.com/api/methods.html#Meteor-Error\" target=\"_blank\" rel=\"external\">Meteor.Error</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'error'</span>, <span class=\"string\">'I do not really want it'</span>, &#123;</div><div class=\"line\">            <span class=\"attr\">why</span>: <span class=\"string\">\"I have eaten too many\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// The first argument (error): is something very general, can be a number like 500, 404, </span></div><div class=\"line\">        <span class=\"comment\">// The second argument (reason): is a description of the error</span></div><div class=\"line\">        <span class=\"comment\">// The third argument (details): is for providing more details about the error.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, if you do the call on the client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error: '</span>, err);</div><div class=\"line\">        <span class=\"comment\">// in err object you have to (err.error, err.reason, err.details)</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wooho! No Errors'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>So, from now on, to make errors comprehensible everywhere, use <em>Meteor.Error</em> for throwing exceptions.</p>\n<h2 id=\"Arguments-for-our-methods\"><a href=\"#Arguments-for-our-methods\" class=\"headerlink\" title=\"Arguments for our methods\"></a>Arguments for our methods</h2><p>Just like in a normal conversation, in which you have to use arguments, methods can receive arguments of any kind !</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">one, two, three</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [one, two, three];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client or server</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, &#123;<span class=\"attr\">three</span>: <span class=\"string\">'Arguments'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The fact that we can now use arguments with methods opens a world of possibilities to us. But this can make methods fairly complex, \nwhich is why, during the course of this tutorial, we will talk some more about methods.</p>\n<h2 id=\"Work-more-to-learn-more\"><a href=\"#Work-more-to-learn-more\" class=\"headerlink\" title=\"Work more to learn more\"></a>Work more to learn more</h2><p>Now let’s practice what we’ve learned in this section with a few simple exercises:</p>\n<h4 id=\"1-Get-me-all-the-donuts\"><a href=\"#1-Get-me-all-the-donuts\" class=\"headerlink\" title=\"1. Get me all the donuts\"></a>1. Get me all the donuts</h4><p>Try out this code, to get all the donuts from the database :\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Give-me-some-donuts\"><a href=\"#2-Give-me-some-donuts\" class=\"headerlink\" title=\"2. Give me some donuts\"></a>2. Give me some donuts</h4><p>Try out this code snippet, to get some donuts ( after all, moderation is good when consuming sweets):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list_filtered'</span>, &#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">$gt</span>: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Updating\"><a href=\"#3-Updating\" class=\"headerlink\" title=\"3. Updating\"></a>3. Updating</h4><p>Test yourself !\nCreate a method that takes two arguments, <em>_id</em> and <em>data</em>, and <em>$set</em>s the data for the donut with that _id.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list_filtered'</span>, donutId, &#123;<span class=\"attr\">price</span>: <span class=\"number\">1000</span>&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RPC’s-a-way-to-express-yourself\"><a href=\"#RPC’s-a-way-to-express-yourself\" class=\"headerlink\" title=\"RPC’s - a way to express yourself\"></a>RPC’s - a way to express yourself</h2><p>Well, you probably already ask yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. </p>\n<p>First of all, RPC stands for “Remote Procedure Call”, which basically means that you invoke “something” with some arguments ( only if you want to use arguments, of course).\nThen you expect a response, just like you would do when in a conversation. If you get an error, then your “conversation” might not be so productive, so check your code :).</p>\n<p>Having a conversation in Meteor is quite simple.\nIn Meteor, the usual way of doing this, and the best, is by communicating through a websocket with the server. \nif you disable websockets, it falls back to something else, which we won’t talk about in this tutorial</p>\n<p>So what actions we can do in our “conversations” with RPC’s ?</p>\n<ul>\n<li>Fetching data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Anything you can possibly think of</li>\n</ul>\n<p>Methods are created server-side, and they can be called from the client or from the server as well.\nIn the <code>meteor shell</code>, since we’ve already established where it is located, it means we are calling RPC’s from the server.</p>\n<p>We can also have methods on the client-side, which can be used for Optimistic UI, something we won’t be discussing.</p>\n<h2 id=\"Let’s-create-a-method-or-RPC\"><a href=\"#Let’s-create-a-method-or-RPC\" class=\"headerlink\" title=\"Let’s create a method( or RPC)\"></a>Let’s create a method( or RPC)</h2><p>Let’s keep using the sample application we created at the beginning of the tutorial (  yes, i still love donuts! ), and in the file <em>imports/api/donuts/methods.js</em> we’ll write:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Now…how-to-use-it\"><a href=\"#Now…how-to-use-it\" class=\"headerlink\" title=\"Now…how to use it ?\"></a>Now…how to use it ?</h2><p>Methods can be called from the server-side or from the client-side. Let’s try it first in the <em>meteor shell</em>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>BANG!\nAnother error ! But we’ve already dealt with errors before, so fear not…you caninux shutd do this ! \n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: <span class=\"function\"><span class=\"keyword\">Method</span> '<span class=\"title\">create_a_donut</span>' <span class=\"title\">not</span> <span class=\"title\">found</span> [404]</span></div></pre></td></tr></table></figure></p>\n<p>Meteor has basically no idea that the method you just wrote exists. So you just created a file inside imports, but there is absolutely no link to it.\nSo, as a golden rule, if you don’t create a link to your file, it’s just as ineffective as if it wouldn’t exist.</p>\n<p>How do you create such a link ?\nWell, in the “/imports/startup/server/index.js” file, import the methods.js file:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/imports/api/donuts/methods.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>Now let the server restart itself ( it does that when you change the code in your application ).\nAfter calling the method in the <em>meteor shell</em>, it will respond to you with a message that looks like this:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div><div class=\"line\"><span class=\"string\">'MLx7SF79kXvAZuEyx'</span></div></pre></td></tr></table></figure></p>\n<p>That’s because of this line:\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>Let’s ignore the “return” part for now and focus on the “insert” for a little bit.\nWith “insert()”, we just inserted content into the database. As a consequence, the occurrence of this operation will determine the system\nto “spit out”  the newly created _id, thus giving us a way of identifying the operation.\nNow let’s get back to the “return()” part !\nWhat you return in the method body is returned to the caller. \nYou can return anything you want: objects, arrays, strings, dates, and, you guessed it-id’s !\nIn the background, the data is serialized to the <a href=\"http://docs.meteor.com/api/ejson.html\" target=\"_blank\" rel=\"external\">EJSON</a> format, then deserialized where it’s called.</p>\n<p>Now let’s view the results of our work in the browser.\nOpen your web browser and navigate to <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></em> .\nNow open your browser’s console by typing Ctrl+Shift+I in Google Chrome. \nWe recommend Google Chrome, as it is the best, but feel free to test into other browsers as well.\nIt might even give you some perspective as to how you could optimize an application to work well with multiple browsers !</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>That’s weird…nothing happened. \nLet’s check the database. What’s going on ?</p>\n<p>Well, when you make a call from the client, you can’t get the answer instantly, because your call initiates a “conversation” through a <a href=\"https://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"external\">websocket</a> with the server.\nThen, the server needs to complete the operation you requested in that call and “get back to you” with the results.\nThis operation can take few milliseconds, which is why we need to provide a <a href=\"https://en.wikipedia.org/wiki/Callback_(computer_programming\" target=\"_blank\" rel=\"external\">callback</a>) to our method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now it works, but why did we use “err” ?<br>You will find an explanation <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Errors-in-methods\"><a href=\"#Errors-in-methods\" class=\"headerlink\" title=\"Errors in methods\"></a>Errors in methods</h2><p>If you try using <code>console.log(err)</code> in <em>Meteor Shell</em>, you will see that it’s undefined. Because the server did not throw any error while handling your method.</p>\n<p>Let’s cause an error and see what happens:\nType this code in the <em>imports/api/donuts/methods.js</em> file:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"I don't wanna!\"</span>; <span class=\"comment\">// notice that the \"throw\" statement accepts any type of argument, not just strings</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now if we call the method we just created in the shell ( “initiate a conversation with the server”, if you want to call it like that):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure></p>\n<p>We’ll get a response in the form of a string containing the error message. \nThis doesn’t help us very much, since we don’t know if it’s an actual response or an error. \nHowever, we ave another way for solving this, as we have at our disposal server-side callbacks as well:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now let’s move to the client for a little bit. The reason we have to do this, and the reason for which we have been dealing with errors since the beginning is\n because, while working on projects you’ll encounter a lot of errors and identifying and treating them is a critical part of being a good web developer.</p>\n<p>After making the same operations we did on the server, to the client, you should get a response that looks like this:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">errorClass &#123;</div><div class=\"line\">    <span class=\"attr\">details</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">    error: <span class=\"number\">500</span></div><div class=\"line\">    errorType: <span class=\"string\">\"Meteor.Error\"</span></div><div class=\"line\">    message: <span class=\"string\">\"Internal server error [500]\"</span></div><div class=\"line\">    reason: <span class=\"string\">\"Internal server error\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>That’s not very helpful, is it ? It’ doesn’t help you identify the error, nor does it give you tips about solving the error, unlike the message from the server.</p>\n<p>This is why, in order to make the errors that originate from the client descriptive and comprehensive, we need to use <a href=\"https://docs.meteor.com/api/methods.html#Meteor-Error\" target=\"_blank\" rel=\"external\">Meteor.Error</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'error'</span>, <span class=\"string\">'I do not really want it'</span>, &#123;</div><div class=\"line\">            <span class=\"attr\">why</span>: <span class=\"string\">\"I have eaten too many\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// The first argument (error): is something very general, can be a number like 500, 404, </span></div><div class=\"line\">        <span class=\"comment\">// The second argument (reason): is a description of the error</span></div><div class=\"line\">        <span class=\"comment\">// The third argument (details): is for providing more details about the error.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, if you do the call on the client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error: '</span>, err);</div><div class=\"line\">        <span class=\"comment\">// in err object you have to (err.error, err.reason, err.details)</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wooho! No Errors'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>So, from now on, to make errors comprehensible everywhere, use <em>Meteor.Error</em> for throwing exceptions.</p>\n<h2 id=\"Arguments-for-our-methods\"><a href=\"#Arguments-for-our-methods\" class=\"headerlink\" title=\"Arguments for our methods\"></a>Arguments for our methods</h2><p>Just like in a normal conversation, in which you have to use arguments, methods can receive arguments of any kind !</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">one, two, three</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [one, two, three];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client or server</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, &#123;<span class=\"attr\">three</span>: <span class=\"string\">'Arguments'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The fact that we can now use arguments with methods opens a world of possibilities to us. But this can make methods fairly complex, \nwhich is why, during the course of this tutorial, we will talk some more about methods.</p>\n<h2 id=\"Work-more-to-learn-more\"><a href=\"#Work-more-to-learn-more\" class=\"headerlink\" title=\"Work more to learn more\"></a>Work more to learn more</h2><p>Now let’s practice what we’ve learned in this section with a few simple exercises:</p>\n<h4 id=\"1-Get-me-all-the-donuts\"><a href=\"#1-Get-me-all-the-donuts\" class=\"headerlink\" title=\"1. Get me all the donuts\"></a>1. Get me all the donuts</h4><p>Try out this code, to get all the donuts from the database :\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Give-me-some-donuts\"><a href=\"#2-Give-me-some-donuts\" class=\"headerlink\" title=\"2. Give me some donuts\"></a>2. Give me some donuts</h4><p>Try out this code snippet, to get some donuts ( after all, moderation is good when consuming sweets):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list_filtered'</span>, &#123;<span class=\"attr\">price</span>: &#123;<span class=\"attr\">$gt</span>: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Updating\"><a href=\"#3-Updating\" class=\"headerlink\" title=\"3. Updating\"></a>3. Updating</h4><p>Test yourself !\nCreate a method that takes two arguments, <em>_id</em> and <em>data</em>, and <em>$set</em>s the data for the donut with that _id.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'donuts.list_filtered'</span>, donutId, &#123;<span class=\"attr\">price</span>: <span class=\"number\">1000</span>&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Welcome","description":"Meteor Tuts. Learning Meteor From NOOB to PRO","disqusPage":"Welcome","_content":"\n<h1>Hi there!</h1>\n\nWe are Cult of Coders, a company which focuses on developing the best possible web applications.\nWe only work with Meteor, we absolutely love it, and we'd like to teach you how to use it.\n\nDuring the last few years we've gathered a lot of experience, and we'd like to share that experience with you.\nMeteor has changed a lot, and is now fully packed with lots of cool stuff that will enable you to create both\nsimple and complex enterprise-level applications.\n\nThis tutorial will be structured in chapters, which are made up of lessons.\n\nWe encourage you to follow along in a practical manner. This way, you will encounter problems, and learn more.\nAlso, the information will come back to you a lot easier when you work on projects !\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.\n\nHowever, if you do need to learn Javascript, you can use these resources:\n- https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n- https://www.codecademy.com/learn/javascript\n\nIf you are familiar with Javascript, but not with the ES6 syntax:\n- http://exploringjs.com/es2016-es2017.html\n- http://exploringjs.com/es6/index.html\n- https://github.com/ericdouglas/ES6-Learning\n- http://es6katas.org/\n- http://learnharmony.org/\n","source":"index.md","raw":"---\ntitle: Welcome\ndescription: 'Meteor Tuts. Learning Meteor From NOOB to PRO'\ndisqusPage: 'Welcome'\n---\n\n<h1>Hi there!</h1>\n\nWe are Cult of Coders, a company which focuses on developing the best possible web applications.\nWe only work with Meteor, we absolutely love it, and we'd like to teach you how to use it.\n\nDuring the last few years we've gathered a lot of experience, and we'd like to share that experience with you.\nMeteor has changed a lot, and is now fully packed with lots of cool stuff that will enable you to create both\nsimple and complex enterprise-level applications.\n\nThis tutorial will be structured in chapters, which are made up of lessons.\n\nWe encourage you to follow along in a practical manner. This way, you will encounter problems, and learn more.\nAlso, the information will come back to you a lot easier when you work on projects !\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.\n\nHowever, if you do need to learn Javascript, you can use these resources:\n- https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n- https://www.codecademy.com/learn/javascript\n\nIf you are familiar with Javascript, but not with the ES6 syntax:\n- http://exploringjs.com/es2016-es2017.html\n- http://exploringjs.com/es6/index.html\n- https://github.com/ericdouglas/ES6-Learning\n- http://es6katas.org/\n- http://learnharmony.org/\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"index.html","_id":"ciurgklpx0000zwjxxxu58myv","comments":1,"layout":"page","content":"<h1>Hi there!</h1>\n\n<p>We are Cult of Coders, a company which focuses on developing the best possible web applications.\nWe only work with Meteor, we absolutely love it, and we’d like to teach you how to use it.</p>\n<p>During the last few years we’ve gathered a lot of experience, and we’d like to share that experience with you.\nMeteor has changed a lot, and is now fully packed with lots of cool stuff that will enable you to create both\nsimple and complex enterprise-level applications.</p>\n<p>This tutorial will be structured in chapters, which are made up of lessons.</p>\n<p>We encourage you to follow along in a practical manner. This way, you will encounter problems, and learn more.\nAlso, the information will come back to you a lot easier when you work on projects !</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.</p>\n<p>However, if you do need to learn Javascript, you can use these resources:</p>\n<ul>\n<li><a href=\"https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n<li><a href=\"https://www.codecademy.com/learn/javascript\" target=\"_blank\" rel=\"external\">https://www.codecademy.com/learn/javascript</a></li>\n</ul>\n<p>If you are familiar with Javascript, but not with the ES6 syntax:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es2016-es2017.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es2016-es2017.html</a></li>\n<li><a href=\"http://exploringjs.com/es6/index.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es6/index.html</a></li>\n<li><a href=\"https://github.com/ericdouglas/ES6-Learning\" target=\"_blank\" rel=\"external\">https://github.com/ericdouglas/ES6-Learning</a></li>\n<li><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"external\">http://es6katas.org/</a></li>\n<li><a href=\"http://learnharmony.org/\" target=\"_blank\" rel=\"external\">http://learnharmony.org/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>Hi there!</h1>\n\n<p>We are Cult of Coders, a company which focuses on developing the best possible web applications.\nWe only work with Meteor, we absolutely love it, and we’d like to teach you how to use it.</p>\n<p>During the last few years we’ve gathered a lot of experience, and we’d like to share that experience with you.\nMeteor has changed a lot, and is now fully packed with lots of cool stuff that will enable you to create both\nsimple and complex enterprise-level applications.</p>\n<p>This tutorial will be structured in chapters, which are made up of lessons.</p>\n<p>We encourage you to follow along in a practical manner. This way, you will encounter problems, and learn more.\nAlso, the information will come back to you a lot easier when you work on projects !</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.</p>\n<p>However, if you do need to learn Javascript, you can use these resources:</p>\n<ul>\n<li><a href=\"https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n<li><a href=\"https://www.codecademy.com/learn/javascript\" target=\"_blank\" rel=\"external\">https://www.codecademy.com/learn/javascript</a></li>\n</ul>\n<p>If you are familiar with Javascript, but not with the ES6 syntax:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es2016-es2017.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es2016-es2017.html</a></li>\n<li><a href=\"http://exploringjs.com/es6/index.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es6/index.html</a></li>\n<li><a href=\"https://github.com/ericdouglas/ES6-Learning\" target=\"_blank\" rel=\"external\">https://github.com/ericdouglas/ES6-Learning</a></li>\n<li><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"external\">http://es6katas.org/</a></li>\n<li><a href=\"http://learnharmony.org/\" target=\"_blank\" rel=\"external\">http://learnharmony.org/</a></li>\n</ul>\n"},{"title":"Publications & Subscriptions","description":"The Meteor's way of building reactive apps","disqusPage":"Chapter 1: Pub/Sub","_content":"\nHey there, you seem tenacious, it seems that Methods & Tracker did not put you down, and you continued, I like that.\n\n## Pub/Sub System\n\nThe first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.\n\nBasically, it's a communication system, where the \"publishers\" send messages to the \"subscribers\".\n\nIn Meteor we use this to have reactive data, meaning when something happens, like a new donut is added, I can see it live in my web-page.\n\n## Publishing in Meteor\n\n**Publishing** = \"Hey bro, I will give you access to this data.\"\n\n```js\n// file: /imports/api/donuts/publication.js\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection'; // no .js ? yep, works like that too!\n\nMeteor.publish('donuts', function () {\n    return Donuts.find();\n})\n\n// file: /imports/startup/server/index.js\nimport '/imports/api/donuts/publication.js'; // the server needs to know about it!\n```\n\nHmm, wait, why didn't we returned the elements directly, where is `.fetch()` in this equation ?\n\nIt's because a publication needs to return:\n1. A cursor\n2. An array of cursors\n\n## What is a cursor ?\n\nA good way to think about a cursor is to think of it as an \"address\". In the example above, we returned an address to all Donuts.\n\nQ: Wait, isn't that what methods also do ?\n\nA: Yes, but with publication we benefit of reactivity and we'll discover how this works next.\n\nQ: Ok, so when should I use methods and when pub/sub ?\n\nA: You'll use pub/sub when you want to see the data changing live for you. Methods for the rest.\n\n## Subscribing to a publication\n\n**Subscribing** = \"Hey bro, I want access to the data you are offering me.\"\n\nYou noticed that when we created our publication, we first passed a string, 'donuts'. We must use\nthat same string in order to subscribe to it.\n\nGo to http://localhost:3000 and open your console:\n```js\nvar handler = Meteor.subscribe('donuts');\n```\n\nThe handler contains:\n- subscriptionId : which is a unique identifier for your subscription\n- ready() : a function that returns true, if the subscription is ready\n```js\nhandler.ready(); // should return true\n```\n- stop() : stop the subscription\n\nWhen a subscription is ready, basically it means that the server got your request, and it will fill the data.\n\nHow do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet's see how we can access these modules from our browser.\n\n## Nasty Globals\n\nWe meet again! Darn you globals. This time we need to access our DonutsCollection on the client.\n\nThis time for the client: [Nasty Globals](/chapters/1/collections.html#Nasty-Globals)\n\n## Client-side Collections\n\nIt's got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible.\n\nIf you still want to do it like that because it's easier, fine by me. You could try it:\n```js\nDonutsCollection.insert({})\n```\n\nThis works because you have `insecure` package installed in Meteor. `meteor remove insecure` and this will no longer work.\n\nNow that we got access to our collection, let's do:\n```js\n// Meteor, give me my donuts:\nMeteor.subscribe('donuts')\n\n// wait for 1-2 seconds\nDonutsCollection.find().fetch()\n```\n\n```js\n// meteor shell, or browser (because we have insecure package)\nDonutsCollection.insert(somethingThatYouWant)\n```\n\n```js\n// browser console\nDonutsCollection.find().fetch()\n```\n\n## Seeing changes live\nYou should see your elements here. Wow! Cool. But you mentioned something about reactivity ?\n\nCursors are reactive data sources, and we can track reactive data sources using the tracker:\n\n```js\nTracker.autorun(() => {\n    console.log(DonutsCollection.find().fetch());\n})\n```\n\nNow everytime something in the \"address\" changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.\n\nThis will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.\n\nThis is the most barebones, straight forward way of showing you how Meteor's reactivity works. \n\nIt is magical, and the way it works is absolutely genious, but! we shouldn't really discuss this right now,\nyou don't have to understand how electricity works in order to use it right ?\n\n## Managing the subscription\n\n```js\nvar handle = Meteor.subscribe('some_publication');\nhandle.stop(); // will stop listening to changes\nhandle.ready(); // will return true/false if the subscription is ready\n```\n\nJust keep in mind: when you have handle.ready() true, if you do super quick `.find().fetch()` might be empty, that's because\nready() does not mean that you got all the data, it means that the connections was established, and Meteor will pump the data there.\n\n \n\n\n\n\n\n","source":"chapters/1/pubsub.md","raw":"---\ntitle: Publications & Subscriptions\ndescription: The Meteor's way of building reactive apps\ndisqusPage: 'Chapter 1: Pub/Sub'\n---\n\nHey there, you seem tenacious, it seems that Methods & Tracker did not put you down, and you continued, I like that.\n\n## Pub/Sub System\n\nThe first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.\n\nBasically, it's a communication system, where the \"publishers\" send messages to the \"subscribers\".\n\nIn Meteor we use this to have reactive data, meaning when something happens, like a new donut is added, I can see it live in my web-page.\n\n## Publishing in Meteor\n\n**Publishing** = \"Hey bro, I will give you access to this data.\"\n\n```js\n// file: /imports/api/donuts/publication.js\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection'; // no .js ? yep, works like that too!\n\nMeteor.publish('donuts', function () {\n    return Donuts.find();\n})\n\n// file: /imports/startup/server/index.js\nimport '/imports/api/donuts/publication.js'; // the server needs to know about it!\n```\n\nHmm, wait, why didn't we returned the elements directly, where is `.fetch()` in this equation ?\n\nIt's because a publication needs to return:\n1. A cursor\n2. An array of cursors\n\n## What is a cursor ?\n\nA good way to think about a cursor is to think of it as an \"address\". In the example above, we returned an address to all Donuts.\n\nQ: Wait, isn't that what methods also do ?\n\nA: Yes, but with publication we benefit of reactivity and we'll discover how this works next.\n\nQ: Ok, so when should I use methods and when pub/sub ?\n\nA: You'll use pub/sub when you want to see the data changing live for you. Methods for the rest.\n\n## Subscribing to a publication\n\n**Subscribing** = \"Hey bro, I want access to the data you are offering me.\"\n\nYou noticed that when we created our publication, we first passed a string, 'donuts'. We must use\nthat same string in order to subscribe to it.\n\nGo to http://localhost:3000 and open your console:\n```js\nvar handler = Meteor.subscribe('donuts');\n```\n\nThe handler contains:\n- subscriptionId : which is a unique identifier for your subscription\n- ready() : a function that returns true, if the subscription is ready\n```js\nhandler.ready(); // should return true\n```\n- stop() : stop the subscription\n\nWhen a subscription is ready, basically it means that the server got your request, and it will fill the data.\n\nHow do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet's see how we can access these modules from our browser.\n\n## Nasty Globals\n\nWe meet again! Darn you globals. This time we need to access our DonutsCollection on the client.\n\nThis time for the client: [Nasty Globals](/chapters/1/collections.html#Nasty-Globals)\n\n## Client-side Collections\n\nIt's got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible.\n\nIf you still want to do it like that because it's easier, fine by me. You could try it:\n```js\nDonutsCollection.insert({})\n```\n\nThis works because you have `insecure` package installed in Meteor. `meteor remove insecure` and this will no longer work.\n\nNow that we got access to our collection, let's do:\n```js\n// Meteor, give me my donuts:\nMeteor.subscribe('donuts')\n\n// wait for 1-2 seconds\nDonutsCollection.find().fetch()\n```\n\n```js\n// meteor shell, or browser (because we have insecure package)\nDonutsCollection.insert(somethingThatYouWant)\n```\n\n```js\n// browser console\nDonutsCollection.find().fetch()\n```\n\n## Seeing changes live\nYou should see your elements here. Wow! Cool. But you mentioned something about reactivity ?\n\nCursors are reactive data sources, and we can track reactive data sources using the tracker:\n\n```js\nTracker.autorun(() => {\n    console.log(DonutsCollection.find().fetch());\n})\n```\n\nNow everytime something in the \"address\" changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.\n\nThis will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.\n\nThis is the most barebones, straight forward way of showing you how Meteor's reactivity works. \n\nIt is magical, and the way it works is absolutely genious, but! we shouldn't really discuss this right now,\nyou don't have to understand how electricity works in order to use it right ?\n\n## Managing the subscription\n\n```js\nvar handle = Meteor.subscribe('some_publication');\nhandle.stop(); // will stop listening to changes\nhandle.ready(); // will return true/false if the subscription is ready\n```\n\nJust keep in mind: when you have handle.ready() true, if you do super quick `.find().fetch()` might be empty, that's because\nready() does not mean that you got all the data, it means that the connections was established, and Meteor will pump the data there.\n\n \n\n\n\n\n\n","date":"2017-07-04T10:24:55.936Z","updated":"2017-07-04T10:24:55.936Z","path":"chapters/1/pubsub.html","_id":"ciusadl2x0000ftjxliw7ap6p","comments":1,"layout":"page","content":"<p>Hey there, you seem tenacious, it seems that Methods &amp; Tracker did not put you down, and you continued, I like that.</p>\n<h2 id=\"Pub-Sub-System\"><a href=\"#Pub-Sub-System\" class=\"headerlink\" title=\"Pub/Sub System\"></a>Pub/Sub System</h2><p>The first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.</p>\n<p>Basically, it’s a communication system, where the “publishers” send messages to the “subscribers”.</p>\n<p>In Meteor we use this to have reactive data, meaning when something happens, like a new donut is added, I can see it live in my web-page.</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><p><strong>Publishing</strong> = “Hey bro, I will give you access to this data.”</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/donuts/publication.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>; <span class=\"comment\">// no .js ? yep, works like that too!</span></div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'donuts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Donuts.find();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/startup/server/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/imports/api/donuts/publication.js'</span>; <span class=\"comment\">// the server needs to know about it!</span></div></pre></td></tr></table></figure>\n<p>Hmm, wait, why didn’t we returned the elements directly, where is <code>.fetch()</code> in this equation ?</p>\n<p>It’s because a publication needs to return:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor ?\"></a>What is a cursor ?</h2><p>A good way to think about a cursor is to think of it as an “address”. In the example above, we returned an address to all Donuts.</p>\n<p>Q: Wait, isn’t that what methods also do ?</p>\n<p>A: Yes, but with publication we benefit of reactivity and we’ll discover how this works next.</p>\n<p>Q: Ok, so when should I use methods and when pub/sub ?</p>\n<p>A: You’ll use pub/sub when you want to see the data changing live for you. Methods for the rest.</p>\n<h2 id=\"Subscribing-to-a-publication\"><a href=\"#Subscribing-to-a-publication\" class=\"headerlink\" title=\"Subscribing to a publication\"></a>Subscribing to a publication</h2><p><strong>Subscribing</strong> = “Hey bro, I want access to the data you are offering me.”</p>\n<p>You noticed that when we created our publication, we first passed a string, ‘donuts’. We must use\nthat same string in order to subscribe to it.</p>\n<p>Go to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> and open your console:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div></pre></td></tr></table></figure></p>\n<p>The handler contains:</p>\n<ul>\n<li>subscriptionId : which is a unique identifier for your subscription</li>\n<li><p>ready() : a function that returns true, if the subscription is ready</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.ready(); <span class=\"comment\">// should return true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>stop() : stop the subscription</p>\n</li>\n</ul>\n<p>When a subscription is ready, basically it means that the server got your request, and it will fill the data.</p>\n<p>How do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet’s see how we can access these modules from our browser.</p>\n<h2 id=\"Nasty-Globals\"><a href=\"#Nasty-Globals\" class=\"headerlink\" title=\"Nasty Globals\"></a>Nasty Globals</h2><p>We meet again! Darn you globals. This time we need to access our DonutsCollection on the client.</p>\n<p>This time for the client: <a href=\"/chapters/1/collections.html#Nasty-Globals\">Nasty Globals</a></p>\n<h2 id=\"Client-side-Collections\"><a href=\"#Client-side-Collections\" class=\"headerlink\" title=\"Client-side Collections\"></a>Client-side Collections</h2><p>It’s got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible.</p>\n<p>If you still want to do it like that because it’s easier, fine by me. You could try it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;&#125;)</div></pre></td></tr></table></figure></p>\n<p>This works because you have <code>insecure</code> package installed in Meteor. <code>meteor remove insecure</code> and this will no longer work.</p>\n<p>Now that we got access to our collection, let’s do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Meteor, give me my donuts:</span></div><div class=\"line\">Meteor.subscribe(<span class=\"string\">'donuts'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// wait for 1-2 seconds</span></div><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// meteor shell, or browser (because we have insecure package)</span></div><div class=\"line\">DonutsCollection.insert(somethingThatYouWant)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console</span></div><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure>\n<h2 id=\"Seeing-changes-live\"><a href=\"#Seeing-changes-live\" class=\"headerlink\" title=\"Seeing changes live\"></a>Seeing changes live</h2><p>You should see your elements here. Wow! Cool. But you mentioned something about reactivity ?</p>\n<p>Cursors are reactive data sources, and we can track reactive data sources using the tracker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(DonutsCollection.find().fetch());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now everytime something in the “address” changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.</p>\n<p>This will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.</p>\n<p>This is the most barebones, straight forward way of showing you how Meteor’s reactivity works. </p>\n<p>It is magical, and the way it works is absolutely genious, but! we shouldn’t really discuss this right now,\nyou don’t have to understand how electricity works in order to use it right ?</p>\n<h2 id=\"Managing-the-subscription\"><a href=\"#Managing-the-subscription\" class=\"headerlink\" title=\"Managing the subscription\"></a>Managing the subscription</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handle = Meteor.subscribe(<span class=\"string\">'some_publication'</span>);</div><div class=\"line\">handle.stop(); <span class=\"comment\">// will stop listening to changes</span></div><div class=\"line\">handle.ready(); <span class=\"comment\">// will return true/false if the subscription is ready</span></div></pre></td></tr></table></figure>\n<p>Just keep in mind: when you have handle.ready() true, if you do super quick <code>.find().fetch()</code> might be empty, that’s because\nready() does not mean that you got all the data, it means that the connections was established, and Meteor will pump the data there.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hey there, you seem tenacious, it seems that Methods &amp; Tracker did not put you down, and you continued, I like that.</p>\n<h2 id=\"Pub-Sub-System\"><a href=\"#Pub-Sub-System\" class=\"headerlink\" title=\"Pub/Sub System\"></a>Pub/Sub System</h2><p>The first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.</p>\n<p>Basically, it’s a communication system, where the “publishers” send messages to the “subscribers”.</p>\n<p>In Meteor we use this to have reactive data, meaning when something happens, like a new donut is added, I can see it live in my web-page.</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><p><strong>Publishing</strong> = “Hey bro, I will give you access to this data.”</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/donuts/publication.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>; <span class=\"comment\">// no .js ? yep, works like that too!</span></div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'donuts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Donuts.find();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/startup/server/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/imports/api/donuts/publication.js'</span>; <span class=\"comment\">// the server needs to know about it!</span></div></pre></td></tr></table></figure>\n<p>Hmm, wait, why didn’t we returned the elements directly, where is <code>.fetch()</code> in this equation ?</p>\n<p>It’s because a publication needs to return:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor ?\"></a>What is a cursor ?</h2><p>A good way to think about a cursor is to think of it as an “address”. In the example above, we returned an address to all Donuts.</p>\n<p>Q: Wait, isn’t that what methods also do ?</p>\n<p>A: Yes, but with publication we benefit of reactivity and we’ll discover how this works next.</p>\n<p>Q: Ok, so when should I use methods and when pub/sub ?</p>\n<p>A: You’ll use pub/sub when you want to see the data changing live for you. Methods for the rest.</p>\n<h2 id=\"Subscribing-to-a-publication\"><a href=\"#Subscribing-to-a-publication\" class=\"headerlink\" title=\"Subscribing to a publication\"></a>Subscribing to a publication</h2><p><strong>Subscribing</strong> = “Hey bro, I want access to the data you are offering me.”</p>\n<p>You noticed that when we created our publication, we first passed a string, ‘donuts’. We must use\nthat same string in order to subscribe to it.</p>\n<p>Go to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> and open your console:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div></pre></td></tr></table></figure></p>\n<p>The handler contains:</p>\n<ul>\n<li>subscriptionId : which is a unique identifier for your subscription</li>\n<li><p>ready() : a function that returns true, if the subscription is ready</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.ready(); <span class=\"comment\">// should return true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>stop() : stop the subscription</p>\n</li>\n</ul>\n<p>When a subscription is ready, basically it means that the server got your request, and it will fill the data.</p>\n<p>How do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet’s see how we can access these modules from our browser.</p>\n<h2 id=\"Nasty-Globals\"><a href=\"#Nasty-Globals\" class=\"headerlink\" title=\"Nasty Globals\"></a>Nasty Globals</h2><p>We meet again! Darn you globals. This time we need to access our DonutsCollection on the client.</p>\n<p>This time for the client: <a href=\"/chapters/1/collections.html#Nasty-Globals\">Nasty Globals</a></p>\n<h2 id=\"Client-side-Collections\"><a href=\"#Client-side-Collections\" class=\"headerlink\" title=\"Client-side Collections\"></a>Client-side Collections</h2><p>It’s got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible.</p>\n<p>If you still want to do it like that because it’s easier, fine by me. You could try it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DonutsCollection.insert(&#123;&#125;)</div></pre></td></tr></table></figure></p>\n<p>This works because you have <code>insecure</code> package installed in Meteor. <code>meteor remove insecure</code> and this will no longer work.</p>\n<p>Now that we got access to our collection, let’s do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Meteor, give me my donuts:</span></div><div class=\"line\">Meteor.subscribe(<span class=\"string\">'donuts'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// wait for 1-2 seconds</span></div><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// meteor shell, or browser (because we have insecure package)</span></div><div class=\"line\">DonutsCollection.insert(somethingThatYouWant)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console</span></div><div class=\"line\">DonutsCollection.find().fetch()</div></pre></td></tr></table></figure>\n<h2 id=\"Seeing-changes-live\"><a href=\"#Seeing-changes-live\" class=\"headerlink\" title=\"Seeing changes live\"></a>Seeing changes live</h2><p>You should see your elements here. Wow! Cool. But you mentioned something about reactivity ?</p>\n<p>Cursors are reactive data sources, and we can track reactive data sources using the tracker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(DonutsCollection.find().fetch());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now everytime something in the “address” changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.</p>\n<p>This will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.</p>\n<p>This is the most barebones, straight forward way of showing you how Meteor’s reactivity works. </p>\n<p>It is magical, and the way it works is absolutely genious, but! we shouldn’t really discuss this right now,\nyou don’t have to understand how electricity works in order to use it right ?</p>\n<h2 id=\"Managing-the-subscription\"><a href=\"#Managing-the-subscription\" class=\"headerlink\" title=\"Managing the subscription\"></a>Managing the subscription</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handle = Meteor.subscribe(<span class=\"string\">'some_publication'</span>);</div><div class=\"line\">handle.stop(); <span class=\"comment\">// will stop listening to changes</span></div><div class=\"line\">handle.ready(); <span class=\"comment\">// will return true/false if the subscription is ready</span></div></pre></td></tr></table></figure>\n<p>Just keep in mind: when you have handle.ready() true, if you do super quick <code>.find().fetch()</code> might be empty, that’s because\nready() does not mean that you got all the data, it means that the connections was established, and Meteor will pump the data there.</p>\n"},{"title":"Tracker","description":"The Meteor's way of building reactive apps","disqusPage":"Chapter 1: Tracker","_content":"\n## Introduction\n\nLet's now explore a nice concept for Meteor, the Tracker system.\n\nQ: I'm getting sick and tired of this. I'm a web dev, I don't want to see things in my console no more..\n\nA: Man, it's like Mister Myiagi trying to teach Karate Kid, before we reach the level on making everything work in a page, you'll be a master and you'll flow through it,\nbare with me, this is the best way to take you to the learning curve.\n\nLet's make sure you have the right packages.\n```js\n// terminal\nmeteor add tracker reactive-var\n```\n\nNow open up your browser:\n\n```js\n// browser console\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nNothing fancy, what's the deal with this ?\n\nReactiveVar is a **reactive-data source** and you can follow it's changes. To be able to follow the changes we'll be using our infamous *Tracker*\n\n```js\nvar computation = Tracker.autorun(() => {\n    // this is the run function\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to it, it will get *console.log*ed. Try it!\n\n```js\na.set('something')\n```\n\nDoing:\n```js\ncomputation.stop()\n```\n\nWill stop the computation, so now if you set values to your data source, the run function will no longer execute.\n\nLet's recap, we can track changes to reactive data sources, using Tracker. That's all you need to know for now. We needed\nto explain this concept before we dive into the next step.\n\nTracker has many interesting things about it. Read more:\n- https://docs.meteor.com/api/tracker.html\n\nThere are other reactive \"watchers\" out there, it's not the single one in the world, but this one is used by Meteor in many use-cases, and it just works.\n\n\n## Homework\n\n#### 1. Stop. It's too much!\nCreate a tracker that will stop after 5th time it entered the computation\n\n#### 2. Reactive-Dict ?\nFind out what's ReactiveDict and use it to track it's changes.","source":"chapters/1/reactivity.md","raw":"---\ntitle: Tracker\ndescription: The Meteor's way of building reactive apps\ndisqusPage: 'Chapter 1: Tracker'\n---\n\n## Introduction\n\nLet's now explore a nice concept for Meteor, the Tracker system.\n\nQ: I'm getting sick and tired of this. I'm a web dev, I don't want to see things in my console no more..\n\nA: Man, it's like Mister Myiagi trying to teach Karate Kid, before we reach the level on making everything work in a page, you'll be a master and you'll flow through it,\nbare with me, this is the best way to take you to the learning curve.\n\nLet's make sure you have the right packages.\n```js\n// terminal\nmeteor add tracker reactive-var\n```\n\nNow open up your browser:\n\n```js\n// browser console\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nNothing fancy, what's the deal with this ?\n\nReactiveVar is a **reactive-data source** and you can follow it's changes. To be able to follow the changes we'll be using our infamous *Tracker*\n\n```js\nvar computation = Tracker.autorun(() => {\n    // this is the run function\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to it, it will get *console.log*ed. Try it!\n\n```js\na.set('something')\n```\n\nDoing:\n```js\ncomputation.stop()\n```\n\nWill stop the computation, so now if you set values to your data source, the run function will no longer execute.\n\nLet's recap, we can track changes to reactive data sources, using Tracker. That's all you need to know for now. We needed\nto explain this concept before we dive into the next step.\n\nTracker has many interesting things about it. Read more:\n- https://docs.meteor.com/api/tracker.html\n\nThere are other reactive \"watchers\" out there, it's not the single one in the world, but this one is used by Meteor in many use-cases, and it just works.\n\n\n## Homework\n\n#### 1. Stop. It's too much!\nCreate a tracker that will stop after 5th time it entered the computation\n\n#### 2. Reactive-Dict ?\nFind out what's ReactiveDict and use it to track it's changes.","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/reactivity.html","_id":"ciusg1bo40000lrjxv0qz6i9k","comments":1,"layout":"page","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Let’s now explore a nice concept for Meteor, the Tracker system.</p>\n<p>Q: I’m getting sick and tired of this. I’m a web dev, I don’t want to see things in my console no more..</p>\n<p>A: Man, it’s like Mister Myiagi trying to teach Karate Kid, before we reach the level on making everything work in a page, you’ll be a master and you’ll flow through it,\nbare with me, this is the best way to take you to the learning curve.</p>\n<p>Let’s make sure you have the right packages.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// terminal</span></div><div class=\"line\">meteor add tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure></p>\n<p>Now open up your browser:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.set(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure>\n<p>Nothing fancy, what’s the deal with this ?</p>\n<p>ReactiveVar is a <strong>reactive-data source</strong> and you can follow it’s changes. To be able to follow the changes we’ll be using our infamous <em>Tracker</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// this is the run function</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now each time you set some value to it, it will get <em>console.log</em>ed. Try it!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.set(<span class=\"string\">'something'</span>)</div></pre></td></tr></table></figure>\n<p>Doing:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.stop()</div></pre></td></tr></table></figure></p>\n<p>Will stop the computation, so now if you set values to your data source, the run function will no longer execute.</p>\n<p>Let’s recap, we can track changes to reactive data sources, using Tracker. That’s all you need to know for now. We needed\nto explain this concept before we dive into the next step.</p>\n<p>Tracker has many interesting things about it. Read more:</p>\n<ul>\n<li><a href=\"https://docs.meteor.com/api/tracker.html\" target=\"_blank\" rel=\"external\">https://docs.meteor.com/api/tracker.html</a></li>\n</ul>\n<p>There are other reactive “watchers” out there, it’s not the single one in the world, but this one is used by Meteor in many use-cases, and it just works.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Stop-It’s-too-much\"><a href=\"#1-Stop-It’s-too-much\" class=\"headerlink\" title=\"1. Stop. It’s too much!\"></a>1. Stop. It’s too much!</h4><p>Create a tracker that will stop after 5th time it entered the computation</p>\n<h4 id=\"2-Reactive-Dict\"><a href=\"#2-Reactive-Dict\" class=\"headerlink\" title=\"2. Reactive-Dict ?\"></a>2. Reactive-Dict ?</h4><p>Find out what’s ReactiveDict and use it to track it’s changes.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Let’s now explore a nice concept for Meteor, the Tracker system.</p>\n<p>Q: I’m getting sick and tired of this. I’m a web dev, I don’t want to see things in my console no more..</p>\n<p>A: Man, it’s like Mister Myiagi trying to teach Karate Kid, before we reach the level on making everything work in a page, you’ll be a master and you’ll flow through it,\nbare with me, this is the best way to take you to the learning curve.</p>\n<p>Let’s make sure you have the right packages.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// terminal</span></div><div class=\"line\">meteor add tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure></p>\n<p>Now open up your browser:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.set(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure>\n<p>Nothing fancy, what’s the deal with this ?</p>\n<p>ReactiveVar is a <strong>reactive-data source</strong> and you can follow it’s changes. To be able to follow the changes we’ll be using our infamous <em>Tracker</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// this is the run function</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now each time you set some value to it, it will get <em>console.log</em>ed. Try it!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.set(<span class=\"string\">'something'</span>)</div></pre></td></tr></table></figure>\n<p>Doing:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.stop()</div></pre></td></tr></table></figure></p>\n<p>Will stop the computation, so now if you set values to your data source, the run function will no longer execute.</p>\n<p>Let’s recap, we can track changes to reactive data sources, using Tracker. That’s all you need to know for now. We needed\nto explain this concept before we dive into the next step.</p>\n<p>Tracker has many interesting things about it. Read more:</p>\n<ul>\n<li><a href=\"https://docs.meteor.com/api/tracker.html\" target=\"_blank\" rel=\"external\">https://docs.meteor.com/api/tracker.html</a></li>\n</ul>\n<p>There are other reactive “watchers” out there, it’s not the single one in the world, but this one is used by Meteor in many use-cases, and it just works.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Stop-It’s-too-much\"><a href=\"#1-Stop-It’s-too-much\" class=\"headerlink\" title=\"1. Stop. It’s too much!\"></a>1. Stop. It’s too much!</h4><p>Create a tracker that will stop after 5th time it entered the computation</p>\n<h4 id=\"2-Reactive-Dict\"><a href=\"#2-Reactive-Dict\" class=\"headerlink\" title=\"2. Reactive-Dict ?\"></a>2. Reactive-Dict ?</h4><p>Find out what’s ReactiveDict and use it to track it’s changes.</p>\n"},{"title":"Accounts","description":"How Meteor handles users","disqusPage":"Chapter 1: Accounts","_content":"\nOh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:\n\n- Creating an user\n- Login (Password, Facebook, Google, ...)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this episode we'll focus more on using it with passwords, but we'll also show you how easy it is to integrate it with other systems.\n\n```\nmeteor add accounts-base accounts-password\n```\n\nOpen your server-side shell and type:\n\n```js\nAccounts.createUser({\n    email: 'donut@lover.com', \n    password: '12345'\n})\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```js\nMeteor.loginWithPassword('donut@lover.com', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam! You're logged in.\n\n```js\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.\n\nAnother thing you may notice is how `emails` key is structured:\n```js\n[\n    {\n        address: 'donut@lover.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```js\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```js\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```js\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBtw, the callbacks we used in `loginWithPassword`, `changePassword` and `logout` are optional, you can simply not use it.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```js\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```js\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam!\nWhat if you want registration, but with mail confirmation ?\n\nGo to your meteor shell:\n```js\nAccounts.createUser({\n    email: 'user@withoutPassword.com'\n})\n\n// it returns the newly created _id\n\nAccounts.sendEnrollmentEmail(_id);\n```\n\nNow go to where you started meteor and check the email out.\nGet the token and set a new password using `Accounts.resetPassword()`\n\nEmails are customizable:\nhttp://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\n\nRead more about other cool stuff here:\nhttp://docs.meteor.com/api/passwords.html\n\nThat's a short intro into the account system. Isn't it super-duper easy ?\n\nLogin with Facebook, Google, Twitter, etc:\nhttps://guide.meteor.com/accounts.html#supported-login-services","source":"chapters/1/users.md","raw":"---\ntitle: Accounts\ndescription: How Meteor handles users\ndisqusPage: 'Chapter 1: Accounts'\n---\n\nOh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:\n\n- Creating an user\n- Login (Password, Facebook, Google, ...)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this episode we'll focus more on using it with passwords, but we'll also show you how easy it is to integrate it with other systems.\n\n```\nmeteor add accounts-base accounts-password\n```\n\nOpen your server-side shell and type:\n\n```js\nAccounts.createUser({\n    email: 'donut@lover.com', \n    password: '12345'\n})\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```js\nMeteor.loginWithPassword('donut@lover.com', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam! You're logged in.\n\n```js\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.\n\nAnother thing you may notice is how `emails` key is structured:\n```js\n[\n    {\n        address: 'donut@lover.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```js\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```js\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```js\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBtw, the callbacks we used in `loginWithPassword`, `changePassword` and `logout` are optional, you can simply not use it.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```js\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```js\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam!\nWhat if you want registration, but with mail confirmation ?\n\nGo to your meteor shell:\n```js\nAccounts.createUser({\n    email: 'user@withoutPassword.com'\n})\n\n// it returns the newly created _id\n\nAccounts.sendEnrollmentEmail(_id);\n```\n\nNow go to where you started meteor and check the email out.\nGet the token and set a new password using `Accounts.resetPassword()`\n\nEmails are customizable:\nhttp://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\n\nRead more about other cool stuff here:\nhttp://docs.meteor.com/api/passwords.html\n\nThat's a short intro into the account system. Isn't it super-duper easy ?\n\nLogin with Facebook, Google, Twitter, etc:\nhttps://guide.meteor.com/accounts.html#supported-login-services","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/users.html","_id":"ciushr1a10001lrjxef1x4k0v","comments":1,"layout":"page","content":"<p>Oh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (Password, Facebook, Google, …)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this episode we’ll focus more on using it with passwords, but we’ll also show you how easy it is to integrate it with other systems.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Open your server-side shell and type:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.createUser(&#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span>, </div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'12345'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'donut@lover.com'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam! You’re logged in.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user() <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId() <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">address</span>: <span class=\"string\">'donut@lover.com'</span>,</div><div class=\"line\">        <span class=\"attr\">verified</span>: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.user().emails[<span class=\"number\">0</span>].address</div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>Btw, the callbacks we used in <code>loginWithPassword</code>, <code>changePassword</code> and <code>logout</code> are optional, you can simply not use it.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.forgotPassword(&#123; <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam!\nWhat if you want registration, but with mail confirmation ?</p>\n<p>Go to your meteor shell:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.createUser(&#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'user@withoutPassword.com'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// it returns the newly created _id</span></div><div class=\"line\"></div><div class=\"line\">Accounts.sendEnrollmentEmail(_id);</div></pre></td></tr></table></figure></p>\n<p>Now go to where you started meteor and check the email out.\nGet the token and set a new password using <code>Accounts.resetPassword()</code></p>\n<p>Emails are customizable:\n<a href=\"http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates</a></p>\n<p>Read more about other cool stuff here:\n<a href=\"http://docs.meteor.com/api/passwords.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html</a></p>\n<p>That’s a short intro into the account system. Isn’t it super-duper easy ?</p>\n<p>Login with Facebook, Google, Twitter, etc:\n<a href=\"https://guide.meteor.com/accounts.html#supported-login-services\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/accounts.html#supported-login-services</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Oh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (Password, Facebook, Google, …)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this episode we’ll focus more on using it with passwords, but we’ll also show you how easy it is to integrate it with other systems.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Open your server-side shell and type:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.createUser(&#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span>, </div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'12345'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'donut@lover.com'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam! You’re logged in.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user() <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId() <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">address</span>: <span class=\"string\">'donut@lover.com'</span>,</div><div class=\"line\">        <span class=\"attr\">verified</span>: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.user().emails[<span class=\"number\">0</span>].address</div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>Btw, the callbacks we used in <code>loginWithPassword</code>, <code>changePassword</code> and <code>logout</code> are optional, you can simply not use it.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.forgotPassword(&#123; <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam!\nWhat if you want registration, but with mail confirmation ?</p>\n<p>Go to your meteor shell:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.createUser(&#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'user@withoutPassword.com'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// it returns the newly created _id</span></div><div class=\"line\"></div><div class=\"line\">Accounts.sendEnrollmentEmail(_id);</div></pre></td></tr></table></figure></p>\n<p>Now go to where you started meteor and check the email out.\nGet the token and set a new password using <code>Accounts.resetPassword()</code></p>\n<p>Emails are customizable:\n<a href=\"http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates</a></p>\n<p>Read more about other cool stuff here:\n<a href=\"http://docs.meteor.com/api/passwords.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html</a></p>\n<p>That’s a short intro into the account system. Isn’t it super-duper easy ?</p>\n<p>Login with Facebook, Google, Twitter, etc:\n<a href=\"https://guide.meteor.com/accounts.html#supported-login-services\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/accounts.html#supported-login-services</a></p>\n"},{"title":"Security","description":"Let's talk Security","disqusPage":"Chapter 1: Security","_content":"\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nSo, remember the Methods ?\n\n```js\nMeteor.methods({\n    'do_something': function () {\n        // in it you have access to this.userId\n        // which represents the logged in user\n        // if your user is not logged in it will be null\n        console.log(this.userId);\n    }\n})\n```\n\nSame thing in publications:\n\n```js\nMeteor.publish('something', function () {\n    console.log(this.userId);\n    \n    return this.ready(); \n})\n```\n\n## Managing Roles\n\nBased on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at \"user document\" level, and you can check for that, the thing is, you can do anything you want.\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n\n## Security Module\n\nCentralize security in a module:\n\n```js\n// file: /imports/api/security.js\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static currentUserHasRole(role) {\n        if (!Meteor.isClient) {\n            throw new Meteor.Error('not-allowed', 'This method is only available on the client');\n        }\n\n        return this.hasRole(Meteor.userId(), role);\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets huge.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```js\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'do_something': function () {\n        // throw exception if not logged it:\n        Security.checkLoggedIn(this.userId);\n        \n        // throw exception if not has role:\n        Security.checkRole(this.userId, 'ADMIN');\n        \n        // conditional return\n        if (Security.hasRole('ADMIN')) {\n            return sensitiveData;\n        } else {\n            return publicData;\n        }\n    }\n})\n```\n\nSimple usage in publications:\n\n```js\nimport Security from '/imports/api/security.js';\n\nMeteor.publish('posts', function () {\n    let filters = {};\n    if (!Security.hasRole(this.userId, 'ADMIN')) {\n        // if the user is not an admin, we only show posts with \"isPublic\" true\n        filters.isPublic = true;\n    }\n    \n    return Posts.find(filters);\n})\n```\n\nThat's it. With this knowledge you can build very secure apps!","source":"chapters/1/security.md","raw":"---\ntitle: Security\ndescription: Let's talk Security\ndisqusPage: 'Chapter 1: Security'\n---\n\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nSo, remember the Methods ?\n\n```js\nMeteor.methods({\n    'do_something': function () {\n        // in it you have access to this.userId\n        // which represents the logged in user\n        // if your user is not logged in it will be null\n        console.log(this.userId);\n    }\n})\n```\n\nSame thing in publications:\n\n```js\nMeteor.publish('something', function () {\n    console.log(this.userId);\n    \n    return this.ready(); \n})\n```\n\n## Managing Roles\n\nBased on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at \"user document\" level, and you can check for that, the thing is, you can do anything you want.\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n\n## Security Module\n\nCentralize security in a module:\n\n```js\n// file: /imports/api/security.js\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static currentUserHasRole(role) {\n        if (!Meteor.isClient) {\n            throw new Meteor.Error('not-allowed', 'This method is only available on the client');\n        }\n\n        return this.hasRole(Meteor.userId(), role);\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets huge.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```js\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'do_something': function () {\n        // throw exception if not logged it:\n        Security.checkLoggedIn(this.userId);\n        \n        // throw exception if not has role:\n        Security.checkRole(this.userId, 'ADMIN');\n        \n        // conditional return\n        if (Security.hasRole('ADMIN')) {\n            return sensitiveData;\n        } else {\n            return publicData;\n        }\n    }\n})\n```\n\nSimple usage in publications:\n\n```js\nimport Security from '/imports/api/security.js';\n\nMeteor.publish('posts', function () {\n    let filters = {};\n    if (!Security.hasRole(this.userId, 'ADMIN')) {\n        // if the user is not an admin, we only show posts with \"isPublic\" true\n        filters.isPublic = true;\n    }\n    \n    return Posts.find(filters);\n})\n```\n\nThat's it. With this knowledge you can build very secure apps!","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/security.html","_id":"ciuuujzzk00001gjxm98tz609","comments":1,"layout":"page","content":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>So, remember the Methods ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// in it you have access to this.userId</span></div><div class=\"line\">        <span class=\"comment\">// which represents the logged in user</span></div><div class=\"line\">        <span class=\"comment\">// if your user is not logged in it will be null</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Same thing in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.publish(<span class=\"string\">'something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ready(); </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at “user document” level, and you can check for that, the thing is, you can do anything you want.</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"external\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<h2 id=\"Security-Module\"><a href=\"#Security-Module\" class=\"headerlink\" title=\"Security Module\"></a>Security Module</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> currentUserHasRole(role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Meteor.isClient) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>, <span class=\"string\">'This method is only available on the client'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasRole(Meteor.userId(), role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// throw exception if not logged it:</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// throw exception if not has role:</span></div><div class=\"line\">        Security.checkRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// conditional return</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Security.hasRole(<span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sensitiveData;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> publicData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> filters = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Security.hasRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">        <span class=\"comment\">// if the user is not an admin, we only show posts with \"isPublic\" true</span></div><div class=\"line\">        filters.isPublic = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(filters);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s it. With this knowledge you can build very secure apps!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>So, remember the Methods ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// in it you have access to this.userId</span></div><div class=\"line\">        <span class=\"comment\">// which represents the logged in user</span></div><div class=\"line\">        <span class=\"comment\">// if your user is not logged in it will be null</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Same thing in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.publish(<span class=\"string\">'something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ready(); </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at “user document” level, and you can check for that, the thing is, you can do anything you want.</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"external\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<h2 id=\"Security-Module\"><a href=\"#Security-Module\" class=\"headerlink\" title=\"Security Module\"></a>Security Module</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> currentUserHasRole(role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Meteor.isClient) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>, <span class=\"string\">'This method is only available on the client'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasRole(Meteor.userId(), role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// throw exception if not logged it:</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// throw exception if not has role:</span></div><div class=\"line\">        Security.checkRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// conditional return</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Security.hasRole(<span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sensitiveData;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> publicData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> filters = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Security.hasRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">        <span class=\"comment\">// if the user is not an admin, we only show posts with \"isPublic\" true</span></div><div class=\"line\">        filters.isPublic = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(filters);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s it. With this knowledge you can build very secure apps!</p>\n"},{"title":"Meteor Snacks","description":"Some interesting tools that Meteor has to offer.","disqusPage":"Chapter 1: Meteor Snacks","_content":"\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you would do:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like \n \n```js\nMeteor.methods({\n    'something_async': function () {\n        coolLibrary.coolFunction(function (err, res) {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(); \n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n        }\n        \n        // some API's will not have callbacks with (err, res), but instead give you other arguments with other order\n        // for those edge-cases you may need to use the same \"async\" like syntax:\n        \n        const results = run((arguments, of, the, callback) => {\n            // do something here, this time you are inside a fiber, so it will not crash!\n        })\n        \n        return results;\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\nIf you want an email, we recommend: http://www.mailgun.com/ <- Free for < 10,000 per month\n\n```\n// we use %40 to represent @ because the username, because they need to be URI encoded\nMAIL_URL=\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\" meteor run\n```\n\n```js\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```js\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```js\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.\n\n## Meteor Settings\n\nhttps://docs.meteor.com/api/core.html#Meteor-settings\n\n```json\n// file: .deploy/local.json\n{\n    \"public\": {\n        \"visible\": \"Something that the client can see\"\n    },\n    \"private\": {\n        \"API_KEY\": \"XXX\"\n    }\n}\n```\n\nYou can access the settings from the client-side:\n```\nMeteor.settings.public.visible\n```\n\nYou can access all settings from the server-side:\n```\nMeteor.settings.private.API_KEY\n```\n\n## Run Meteor Easy\n\nInside your Meteor folder you have a file \"package.json\", that packages keeps track of what npm packages you use, and some other\ncool stuff. So for example, you may start an app with diff settings like MAIL_URL, etc, you would do something like:\n```json\n{\n  ...\n  \"scripts\": {\n    \"start\": \"MAIL_URL='xxx' meteor run --port 3000\",\n    \"deploy\": \"We'll get into that in another chapter ;)\"\n  }\n}\n```\n\n```\n// in your terminal:\nnpm run start\n```\n","source":"chapters/1/meteorSnacks.md","raw":"---\ntitle: Meteor Snacks\ndescription: Some interesting tools that Meteor has to offer.\ndisqusPage: 'Chapter 1: Meteor Snacks'\n---\n\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you would do:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like \n \n```js\nMeteor.methods({\n    'something_async': function () {\n        coolLibrary.coolFunction(function (err, res) {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(); \n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n        }\n        \n        // some API's will not have callbacks with (err, res), but instead give you other arguments with other order\n        // for those edge-cases you may need to use the same \"async\" like syntax:\n        \n        const results = run((arguments, of, the, callback) => {\n            // do something here, this time you are inside a fiber, so it will not crash!\n        })\n        \n        return results;\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\nIf you want an email, we recommend: http://www.mailgun.com/ <- Free for < 10,000 per month\n\n```\n// we use %40 to represent @ because the username, because they need to be URI encoded\nMAIL_URL=\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\" meteor run\n```\n\n```js\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```js\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```js\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.\n\n## Meteor Settings\n\nhttps://docs.meteor.com/api/core.html#Meteor-settings\n\n```json\n// file: .deploy/local.json\n{\n    \"public\": {\n        \"visible\": \"Something that the client can see\"\n    },\n    \"private\": {\n        \"API_KEY\": \"XXX\"\n    }\n}\n```\n\nYou can access the settings from the client-side:\n```\nMeteor.settings.public.visible\n```\n\nYou can access all settings from the server-side:\n```\nMeteor.settings.private.API_KEY\n```\n\n## Run Meteor Easy\n\nInside your Meteor folder you have a file \"package.json\", that packages keeps track of what npm packages you use, and some other\ncool stuff. So for example, you may start an app with diff settings like MAIL_URL, etc, you would do something like:\n```json\n{\n  ...\n  \"scripts\": {\n    \"start\": \"MAIL_URL='xxx' meteor run --port 3000\",\n    \"deploy\": \"We'll get into that in another chapter ;)\"\n  }\n}\n```\n\n```\n// in your terminal:\nnpm run start\n```\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/1/meteorSnacks.html","_id":"ciuuvhqrw0000a0jx8hoyytyy","comments":1,"layout":"page","content":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you would do:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(); </div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// some API's will not have callbacks with (err, res), but instead give you other arguments with other order</span></div><div class=\"line\">        <span class=\"comment\">// for those edge-cases you may need to use the same \"async\" like syntax:</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> results = run(<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">arguments</span>, <span class=\"keyword\">of</span>, the, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// do something here, this time you are inside a fiber, so it will not crash!</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> results;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<p>If you want an email, we recommend: <a href=\"http://www.mailgun.com/\" target=\"_blank\" rel=\"external\">http://www.mailgun.com/</a> &lt;- Free for &lt; 10,000 per month</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use %40 to represent @ because the username, because they need to be URI encoded</span></div><div class=\"line\">MAIL_URL=<span class=\"string\">\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\"</span> meteor <span class=\"built_in\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  <span class=\"attr\">to</span>: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"attr\">subject</span>: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  <span class=\"attr\">html</span>: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div><div class=\"line\">Assets.getText(<span class=\"string\">'/some_folder/test.txt'</span>)</div></pre></td></tr></table></figure>\n<p>You would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.</p>\n<h2 id=\"Meteor-Settings\"><a href=\"#Meteor-Settings\" class=\"headerlink\" title=\"Meteor Settings\"></a>Meteor Settings</h2><p><a href=\"https://docs.meteor.com/api/core.html#Meteor-settings\" target=\"_blank\" rel=\"external\">https://docs.meteor.com/api/core.html#Meteor-settings</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: .deploy/local.json</div><div class=\"line\">&#123;</div><div class=\"line\">    \"public\": &#123;</div><div class=\"line\">        \"visible\": \"Something that the client can see\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": &#123;</div><div class=\"line\">        \"API_KEY\": \"XXX\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can access the settings from the client-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.public</span><span class=\"selector-class\">.visible</span></div></pre></td></tr></table></figure></p>\n<p>You can access all settings from the server-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.private</span><span class=\"selector-class\">.API_KEY</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Run-Meteor-Easy\"><a href=\"#Run-Meteor-Easy\" class=\"headerlink\" title=\"Run Meteor Easy\"></a>Run Meteor Easy</h2><p>Inside your Meteor folder you have a file “package.json”, that packages keeps track of what npm packages you use, and some other\ncool stuff. So for example, you may start an app with diff settings like MAIL_URL, etc, you would do something like:\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    \"start\": \"MAIL_URL='xxx' meteor run --port 3000\",</div><div class=\"line\">    \"deploy\": \"We'll get into that in another chapter ;)\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal:</span></div><div class=\"line\">npm <span class=\"built_in\">run</span> start</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you would do:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(); </div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// some API's will not have callbacks with (err, res), but instead give you other arguments with other order</span></div><div class=\"line\">        <span class=\"comment\">// for those edge-cases you may need to use the same \"async\" like syntax:</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> results = run(<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">arguments</span>, <span class=\"keyword\">of</span>, the, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// do something here, this time you are inside a fiber, so it will not crash!</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> results;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<p>If you want an email, we recommend: <a href=\"http://www.mailgun.com/\" target=\"_blank\" rel=\"external\">http://www.mailgun.com/</a> &lt;- Free for &lt; 10,000 per month</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use %40 to represent @ because the username, because they need to be URI encoded</span></div><div class=\"line\">MAIL_URL=<span class=\"string\">\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\"</span> meteor <span class=\"built_in\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  <span class=\"attr\">to</span>: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"attr\">subject</span>: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  <span class=\"attr\">html</span>: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div><div class=\"line\">Assets.getText(<span class=\"string\">'/some_folder/test.txt'</span>)</div></pre></td></tr></table></figure>\n<p>You would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.</p>\n<h2 id=\"Meteor-Settings\"><a href=\"#Meteor-Settings\" class=\"headerlink\" title=\"Meteor Settings\"></a>Meteor Settings</h2><p><a href=\"https://docs.meteor.com/api/core.html#Meteor-settings\" target=\"_blank\" rel=\"external\">https://docs.meteor.com/api/core.html#Meteor-settings</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: .deploy/local.json</div><div class=\"line\">&#123;</div><div class=\"line\">    \"public\": &#123;</div><div class=\"line\">        \"visible\": \"Something that the client can see\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": &#123;</div><div class=\"line\">        \"API_KEY\": \"XXX\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can access the settings from the client-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.public</span><span class=\"selector-class\">.visible</span></div></pre></td></tr></table></figure></p>\n<p>You can access all settings from the server-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.private</span><span class=\"selector-class\">.API_KEY</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Run-Meteor-Easy\"><a href=\"#Run-Meteor-Easy\" class=\"headerlink\" title=\"Run Meteor Easy\"></a>Run Meteor Easy</h2><p>Inside your Meteor folder you have a file “package.json”, that packages keeps track of what npm packages you use, and some other\ncool stuff. So for example, you may start an app with diff settings like MAIL_URL, etc, you would do something like:\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    \"start\": \"MAIL_URL='xxx' meteor run --port 3000\",</div><div class=\"line\">    \"deploy\": \"We'll get into that in another chapter ;)\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal:</span></div><div class=\"line\">npm <span class=\"built_in\">run</span> start</div></pre></td></tr></table></figure>\n"},{"title":"Intro","description":"The View Layer","disqusPage":"Chapter 2: Intro","_content":"\n## Introduction\n\nIn the previous chapter we learned how to harness Meteor's powers. But we didn't see anything actually happening in the UI (The View Layer).\n\nMeteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it's up to you.\n\nDon't get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. \n\n## Brief history\n\nWhen Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. [http://blazejs.org/](http://blazejs.org/). In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn't good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.\n\nEven if Blaze is one of the most friendliest View Layers you'll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.\n\nHowever, from a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.\n\nHowever, times change, new View Layers appeared that support reactivity such as:\n- React\n- Vue.JS\n- Angular2\n- etc\n\nEach has advantages and disadvantages. So question now is what to choose ?\n\nOur current recommendation is: [React](https://facebook.github.io/react/)\n\nReasons for this choice:\n\n- Modular\n- A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive\n- Lightning Fast \n- Maintained by Facebook\n\nHowever, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It's a race. It's the survival of the fittest. Time will decide. For now, pick a technology\nand master it. \n\nKeep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and to the job.","source":"chapters/2/intro.md","raw":"---\ntitle: 'Intro'\ndescription: The View Layer\ndisqusPage: 'Chapter 2: Intro'\n---\n\n## Introduction\n\nIn the previous chapter we learned how to harness Meteor's powers. But we didn't see anything actually happening in the UI (The View Layer).\n\nMeteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it's up to you.\n\nDon't get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. \n\n## Brief history\n\nWhen Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. [http://blazejs.org/](http://blazejs.org/). In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn't good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.\n\nEven if Blaze is one of the most friendliest View Layers you'll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.\n\nHowever, from a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.\n\nHowever, times change, new View Layers appeared that support reactivity such as:\n- React\n- Vue.JS\n- Angular2\n- etc\n\nEach has advantages and disadvantages. So question now is what to choose ?\n\nOur current recommendation is: [React](https://facebook.github.io/react/)\n\nReasons for this choice:\n\n- Modular\n- A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive\n- Lightning Fast \n- Maintained by Facebook\n\nHowever, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It's a race. It's the survival of the fittest. Time will decide. For now, pick a technology\nand master it. \n\nKeep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and to the job.","date":"2016-11-09T09:09:22.735Z","updated":"2016-11-09T09:09:22.735Z","path":"chapters/2/intro.html","_id":"civ9g0npj0002emjx9xoo7vln","comments":1,"layout":"page","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In the previous chapter we learned how to harness Meteor’s powers. But we didn’t see anything actually happening in the UI (The View Layer).</p>\n<p>Meteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it’s up to you.</p>\n<p>Don’t get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. </p>\n<h2 id=\"Brief-history\"><a href=\"#Brief-history\" class=\"headerlink\" title=\"Brief history\"></a>Brief history</h2><p>When Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. <a href=\"http://blazejs.org/\" target=\"_blank\" rel=\"external\">http://blazejs.org/</a>. In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn’t good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.</p>\n<p>Even if Blaze is one of the most friendliest View Layers you’ll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.</p>\n<p>However, from a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.</p>\n<p>However, times change, new View Layers appeared that support reactivity such as:</p>\n<ul>\n<li>React</li>\n<li>Vue.JS</li>\n<li>Angular2</li>\n<li>etc</li>\n</ul>\n<p>Each has advantages and disadvantages. So question now is what to choose ?</p>\n<p>Our current recommendation is: <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a></p>\n<p>Reasons for this choice:</p>\n<ul>\n<li>Modular</li>\n<li>A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive</li>\n<li>Lightning Fast </li>\n<li>Maintained by Facebook</li>\n</ul>\n<p>However, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It’s a race. It’s the survival of the fittest. Time will decide. For now, pick a technology\nand master it. </p>\n<p>Keep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and to the job.</p>\n","excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In the previous chapter we learned how to harness Meteor’s powers. But we didn’t see anything actually happening in the UI (The View Layer).</p>\n<p>Meteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it’s up to you.</p>\n<p>Don’t get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. </p>\n<h2 id=\"Brief-history\"><a href=\"#Brief-history\" class=\"headerlink\" title=\"Brief history\"></a>Brief history</h2><p>When Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. <a href=\"http://blazejs.org/\">http://blazejs.org/</a>. In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn’t good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.</p>\n<p>Even if Blaze is one of the most friendliest View Layers you’ll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.</p>\n<p>However, from a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.</p>\n<p>However, times change, new View Layers appeared that support reactivity such as:</p>\n<ul>\n<li>React</li>\n<li>Vue.JS</li>\n<li>Angular2</li>\n<li>etc</li>\n</ul>\n<p>Each has advantages and disadvantages. So question now is what to choose ?</p>\n<p>Our current recommendation is: <a href=\"https://facebook.github.io/react/\">React</a></p>\n<p>Reasons for this choice:</p>\n<ul>\n<li>Modular</li>\n<li>A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive</li>\n<li>Lightning Fast </li>\n<li>Maintained by Facebook</li>\n</ul>\n<p>However, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It’s a race. It’s the survival of the fittest. Time will decide. For now, pick a technology\nand master it. </p>\n<p>Keep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and to the job.</p>\n"},{"title":"Conclusions","description":"Here we are, at the end of this chapter.","disqusPage":"Chapter 1: Conclusion","_content":"\nSo, we just scratched the surface. Meteor has many good things to offer. The journey has only begun.\n\nYou now have the knowledge how to use Meteor's powers for your application:\n\n- How to store your data in the database via Collections\n- How to use Methods to perform server side actions and return responses to the client\n- Use Meteor's reactive system to see live updates\n- How to secure your methods/publications for a robust application\n\n\nFurther reading:\n\n- https://guide.meteor.com/ \n- https://themeteorchef.com/\n\n\nFeedback is not just welcomed, it's expected. Please share your experience with this tutorial to help improve \nit for the next readers!","source":"chapters/1/conclusion.md","raw":"---\ntitle: Conclusions\ndescription: Here we are, at the end of this chapter.\ndisqusPage: 'Chapter 1: Conclusion'\n---\n\nSo, we just scratched the surface. Meteor has many good things to offer. The journey has only begun.\n\nYou now have the knowledge how to use Meteor's powers for your application:\n\n- How to store your data in the database via Collections\n- How to use Methods to perform server side actions and return responses to the client\n- Use Meteor's reactive system to see live updates\n- How to secure your methods/publications for a robust application\n\n\nFurther reading:\n\n- https://guide.meteor.com/ \n- https://themeteorchef.com/\n\n\nFeedback is not just welcomed, it's expected. Please share your experience with this tutorial to help improve \nit for the next readers!","date":"2016-11-09T09:09:22.735Z","updated":"2016-11-09T09:09:22.731Z","path":"chapters/1/conclusion.html","_id":"civ9g0npk0003emjxii61m771","comments":1,"layout":"page","content":"<p>So, we just scratched the surface. Meteor has many good things to offer. The journey has only begun.</p>\n<p>You now have the knowledge how to use Meteor’s powers for your application:</p>\n<ul>\n<li>How to store your data in the database via Collections</li>\n<li>How to use Methods to perform server side actions and return responses to the client</li>\n<li>Use Meteor’s reactive system to see live updates</li>\n<li>How to secure your methods/publications for a robust application</li>\n</ul>\n<p>Further reading:</p>\n<ul>\n<li><a href=\"https://guide.meteor.com/\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/</a> </li>\n<li><a href=\"https://themeteorchef.com/\" target=\"_blank\" rel=\"external\">https://themeteorchef.com/</a></li>\n</ul>\n<p>Feedback is not just welcomed, it’s expected. Please share your experience with this tutorial to help improve \nit for the next readers!</p>\n","excerpt":"","more":"<p>So, we just scratched the surface. Meteor has many good things to offer. The journey has only begun.</p>\n<p>You now have the knowledge how to use Meteor’s powers for your application:</p>\n<ul>\n<li>How to store your data in the database via Collections</li>\n<li>How to use Methods to perform server side actions and return responses to the client</li>\n<li>Use Meteor’s reactive system to see live updates</li>\n<li>How to secure your methods/publications for a robust application</li>\n</ul>\n<p>Further reading:</p>\n<ul>\n<li><a href=\"https://guide.meteor.com/\">https://guide.meteor.com/</a> </li>\n<li><a href=\"https://themeteorchef.com/\">https://themeteorchef.com/</a></li>\n</ul>\n<p>Feedback is not just welcomed, it’s expected. Please share your experience with this tutorial to help improve \nit for the next readers!</p>\n"},{"title":"Conclusion","description":"Conclusion","disqusPage":"Chapter 2: Conclusion","_content":"\nYou made it through Chapter 2, good job :)\n\nSo we uncovered how to integrate the View Layer into Meteor. What's next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.\n\nNext chapter will be dedicated to how we can use all the knowledge from Chapter 1 & Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. \n\nWe'll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!\n\nIt is going to be a big one.\n\n","source":"chapters/2/conclusion.md","raw":"---\ntitle: 'Conclusion'\ndescription: Conclusion\ndisqusPage: 'Chapter 2: Conclusion'\n---\n\nYou made it through Chapter 2, good job :)\n\nSo we uncovered how to integrate the View Layer into Meteor. What's next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.\n\nNext chapter will be dedicated to how we can use all the knowledge from Chapter 1 & Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. \n\nWe'll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!\n\nIt is going to be a big one.\n\n","date":"2016-11-09T11:55:50.938Z","updated":"2016-11-09T11:55:50.938Z","path":"chapters/2/conclusion.html","_id":"civauf4sw0000kvjxds0vq6rm","comments":1,"layout":"page","content":"<p>You made it through Chapter 2, good job :)</p>\n<p>So we uncovered how to integrate the View Layer into Meteor. What’s next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.</p>\n<p>Next chapter will be dedicated to how we can use all the knowledge from Chapter 1 &amp; Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. </p>\n<p>We’ll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!</p>\n<p>It is going to be a big one.</p>\n","excerpt":"","more":"<p>You made it through Chapter 2, good job :)</p>\n<p>So we uncovered how to integrate the View Layer into Meteor. What’s next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.</p>\n<p>Next chapter will be dedicated to how we can use all the knowledge from Chapter 1 &amp; Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. </p>\n<p>We’ll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!</p>\n<p>It is going to be a big one.</p>\n"},{"title":"React","description":"Integrating React with Meteor","disqusPage":"Chapter 2: React","_content":"\n## Introduction\n\nThis chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what's going on here check the following resources:\n\n- https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\n- https://blog.risingstack.com/the-react-way-getting-started-tutorial/\n- https://egghead.io/courses/react-fundamentals\n- http://jaketrent.com/post/smart-dumb-components-react/\n\n## Setting Up\n```bash\nmeteor add cultofcoders:meteor-react-routing\nmeteor npm install --save react react-mounter react-dom \n```\n\n## Architecture\n\nAs we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the `/imports/ui` folder.\n\nRouting is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in `/imports/routing`\n\n## Routing\n\nPlease follow the README.md from: \nhttps://github.com/cult-of-coders/meteor-react-routing\n\nAfter you have setup your files, created `/imports/routing/router.js`, `/imports/routing/index.js`, and you included the routing in your client/startup folder,\ncreated your `/imports/ui/App.jsx` file, and now it's time to see this baby in action!\n\n```js\n// file: /imports/ui/Home.jsx\nimport React from 'react';\n\nexport default class Home extends React.Component {\n    render() {\n        return <h1>Hello Reactive World!</h1>\n    }\n}\n```\n\n```js\n// file: /imports/routing/index.js\nimport route from './router.js'\n\nroute('/', Home);\n```\n\nNow access it: http://localhost:3000/\n\n## Methods\n\nBy default, if you read the tutorials on React, you realized that React is already reactive, by doing `this.setState` it will\nrerender efficiently your Component.\n \nLet's see how we would call a method and show a response in our component:\n\n```js\n// file: /imports/ui/Home.jsx\nexport default class Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {loading: true, donuts: []}\n    }\n    \n    componentDidMount() {\n        Meteor.call('donuts.list', (err, res) => {\n            this.setState({\n                loading: false,\n                donuts: res // assuming the method returns an array of donuts\n            })\n        })\n    }\n    \n    render() {\n        if (this.state.loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    this.state.donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n```\n\nTry it out, see if it works.\n\n## Publications\n\nFor publications we need Meteor's reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don't have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:\n\nhttps://guide.meteor.com/react.html#using-createContainer\n\n```\n// terminal\nmeteor add react-meteor-data\n```\n\n```js\n// assuming you have a publication 'donuts' that returns Donuts.find()\n// file: /imports/ui/Home.jsx\n\nimport { createContainer } from 'meteor/react-meteor-data';\nimport Donuts from '/imports/api/donuts/collection.js'\n\nclass Home extends React.Component {\n    render() {\n        const {loading, donuts} = this.props;\n        \n        if (loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default createContainer((props) => {\n    const handle = Meteor.subscribe('donuts');\n    // reactive data sources will get tracked here\n    // any change will result into a re-render of \"Home\" component\n    \n    return {\n        loading: !handle.ready(),\n        donuts: Donuts.find().fetch()\n    }\n}, Home)\n```\n\nGo ahead, try adding a new donut from the Meteor's shell. You'll see it updated live.\n\nThis is it. It's just this simple. You now have the knowledge of integrating Meteor & React. Now, we need to\nmaster it.\n\nIn the homework you'll most likely be dealing with forms, here are some starting points:\n- http://www.material-ui.com/\n- https://github.com/christianalfoni/formsy-react\n- https://github.com/mbrookes/formsy-material-ui \n\nBut you can use everything you want.\n\nThere is a package that leverages work for you:\nhttps://github.com/meteor-utilities/react-list-container\n\n## Homework\n\n#### 1. Log me in!\nCreate a route `/login` and a `Login.jsx` file. In it you will have a form. When the form is submitted, \nit will call `Meteor.loginWithPassword` and redirect him to \"/\" [Hint 1](/)\n\n#### 2. Private Donuts!\nOnly allow logged in users to view the donuts list, it is very private. [Hint]()\n\n#### 3. Register\nCreate a registration, use email and password for now.\n\n#### 4. Create a donut\nAs a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.\n\n## Over-achievers\n\n#### 1. Filters\nIn the donuts list, add a checkbox, when you click it it will only show the donuts with price < 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!\n\n#### 2. Pagination (By Methods) (From scratch)\nImplement a pagination strategy (You can use: https://www.npmjs.com/package/react-paginator). Where you display\nall the donuts, 3 items per page. *Quick tip*: You may need to create another method that retrieves the count for all donuts.\n\n#### 3. Pagination (By Subscription) (From scratch)\nThis one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don't) but you want \nit know because you're an over-achiever, check this meteor package for reactive counting:\n\n- https://github.com/percolatestudio/publish-counts\n\n","source":"chapters/2/react.md","raw":"---\ntitle: 'React'\ndescription: Integrating React with Meteor\ndisqusPage: 'Chapter 2: React'\n---\n\n## Introduction\n\nThis chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what's going on here check the following resources:\n\n- https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\n- https://blog.risingstack.com/the-react-way-getting-started-tutorial/\n- https://egghead.io/courses/react-fundamentals\n- http://jaketrent.com/post/smart-dumb-components-react/\n\n## Setting Up\n```bash\nmeteor add cultofcoders:meteor-react-routing\nmeteor npm install --save react react-mounter react-dom \n```\n\n## Architecture\n\nAs we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the `/imports/ui` folder.\n\nRouting is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in `/imports/routing`\n\n## Routing\n\nPlease follow the README.md from: \nhttps://github.com/cult-of-coders/meteor-react-routing\n\nAfter you have setup your files, created `/imports/routing/router.js`, `/imports/routing/index.js`, and you included the routing in your client/startup folder,\ncreated your `/imports/ui/App.jsx` file, and now it's time to see this baby in action!\n\n```js\n// file: /imports/ui/Home.jsx\nimport React from 'react';\n\nexport default class Home extends React.Component {\n    render() {\n        return <h1>Hello Reactive World!</h1>\n    }\n}\n```\n\n```js\n// file: /imports/routing/index.js\nimport route from './router.js'\n\nroute('/', Home);\n```\n\nNow access it: http://localhost:3000/\n\n## Methods\n\nBy default, if you read the tutorials on React, you realized that React is already reactive, by doing `this.setState` it will\nrerender efficiently your Component.\n \nLet's see how we would call a method and show a response in our component:\n\n```js\n// file: /imports/ui/Home.jsx\nexport default class Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {loading: true, donuts: []}\n    }\n    \n    componentDidMount() {\n        Meteor.call('donuts.list', (err, res) => {\n            this.setState({\n                loading: false,\n                donuts: res // assuming the method returns an array of donuts\n            })\n        })\n    }\n    \n    render() {\n        if (this.state.loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    this.state.donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n```\n\nTry it out, see if it works.\n\n## Publications\n\nFor publications we need Meteor's reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don't have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:\n\nhttps://guide.meteor.com/react.html#using-createContainer\n\n```\n// terminal\nmeteor add react-meteor-data\n```\n\n```js\n// assuming you have a publication 'donuts' that returns Donuts.find()\n// file: /imports/ui/Home.jsx\n\nimport { createContainer } from 'meteor/react-meteor-data';\nimport Donuts from '/imports/api/donuts/collection.js'\n\nclass Home extends React.Component {\n    render() {\n        const {loading, donuts} = this.props;\n        \n        if (loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default createContainer((props) => {\n    const handle = Meteor.subscribe('donuts');\n    // reactive data sources will get tracked here\n    // any change will result into a re-render of \"Home\" component\n    \n    return {\n        loading: !handle.ready(),\n        donuts: Donuts.find().fetch()\n    }\n}, Home)\n```\n\nGo ahead, try adding a new donut from the Meteor's shell. You'll see it updated live.\n\nThis is it. It's just this simple. You now have the knowledge of integrating Meteor & React. Now, we need to\nmaster it.\n\nIn the homework you'll most likely be dealing with forms, here are some starting points:\n- http://www.material-ui.com/\n- https://github.com/christianalfoni/formsy-react\n- https://github.com/mbrookes/formsy-material-ui \n\nBut you can use everything you want.\n\nThere is a package that leverages work for you:\nhttps://github.com/meteor-utilities/react-list-container\n\n## Homework\n\n#### 1. Log me in!\nCreate a route `/login` and a `Login.jsx` file. In it you will have a form. When the form is submitted, \nit will call `Meteor.loginWithPassword` and redirect him to \"/\" [Hint 1](/)\n\n#### 2. Private Donuts!\nOnly allow logged in users to view the donuts list, it is very private. [Hint]()\n\n#### 3. Register\nCreate a registration, use email and password for now.\n\n#### 4. Create a donut\nAs a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.\n\n## Over-achievers\n\n#### 1. Filters\nIn the donuts list, add a checkbox, when you click it it will only show the donuts with price < 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!\n\n#### 2. Pagination (By Methods) (From scratch)\nImplement a pagination strategy (You can use: https://www.npmjs.com/package/react-paginator). Where you display\nall the donuts, 3 items per page. *Quick tip*: You may need to create another method that retrieves the count for all donuts.\n\n#### 3. Pagination (By Subscription) (From scratch)\nThis one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don't) but you want \nit know because you're an over-achiever, check this meteor package for reactive counting:\n\n- https://github.com/percolatestudio/publish-counts\n\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/2/react.html","_id":"civb10l8s0000xdjxcjj4nt5c","comments":1,"layout":"page","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what’s going on here check the following resources:</p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"external\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a></li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"external\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a></li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/react-fundamentals</a></li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"external\">http://jaketrent.com/post/smart-dumb-components-react/</a></li>\n</ul>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add cultofcoders:meteor-react-routing</div><div class=\"line\">meteor npm install --save react react-mounter react-dom</div></pre></td></tr></table></figure>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>As we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the <code>/imports/ui</code> folder.</p>\n<p>Routing is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in <code>/imports/routing</code></p>\n<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>Please follow the README.md from: \n<a href=\"https://github.com/cult-of-coders/meteor-react-routing\" target=\"_blank\" rel=\"external\">https://github.com/cult-of-coders/meteor-react-routing</a></p>\n<p>After you have setup your files, created <code>/imports/routing/router.js</code>, <code>/imports/routing/index.js</code>, and you included the routing in your client/startup folder,\ncreated your <code>/imports/ui/App.jsx</code> file, and now it’s time to see this baby in action!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Reactive World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/routing/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> route <span class=\"keyword\">from</span> <span class=\"string\">'./router.js'</span></div><div class=\"line\"></div><div class=\"line\">route(<span class=\"string\">'/'</span>, Home);</div></pre></td></tr></table></figure>\n<p>Now access it: <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<h2 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h2><p>By default, if you read the tutorials on React, you realized that React is already reactive, by doing <code>this.setState</code> it will\nrerender efficiently your Component.</p>\n<p>Let’s see how we would call a method and show a response in our component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">donuts</span>: []&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        Meteor.call(<span class=\"string\">'donuts.list'</span>, (err, res) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">donuts</span>: res <span class=\"comment\">// assuming the method returns an array of donuts</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.state.donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Try it out, see if it works.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p>For publications we need Meteor’s reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don’t have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:</p>\n<p><a href=\"https://guide.meteor.com/react.html#using-createContainer\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/react.html#using-createContainer</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// terminal</div><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>react-meteor-<span class=\"meta\">data</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assuming you have a publication 'donuts' that returns Donuts.find()</span></div><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/react-meteor-data'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;loading, donuts&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div><div class=\"line\">    <span class=\"comment\">// reactive data sources will get tracked here</span></div><div class=\"line\">    <span class=\"comment\">// any change will result into a re-render of \"Home\" component</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">loading</span>: !handle.ready(),</div><div class=\"line\">        <span class=\"attr\">donuts</span>: Donuts.find().fetch()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, Home)</div></pre></td></tr></table></figure>\n<p>Go ahead, try adding a new donut from the Meteor’s shell. You’ll see it updated live.</p>\n<p>This is it. It’s just this simple. You now have the knowledge of integrating Meteor &amp; React. Now, we need to\nmaster it.</p>\n<p>In the homework you’ll most likely be dealing with forms, here are some starting points:</p>\n<ul>\n<li><a href=\"http://www.material-ui.com/\" target=\"_blank\" rel=\"external\">http://www.material-ui.com/</a></li>\n<li><a href=\"https://github.com/christianalfoni/formsy-react\" target=\"_blank\" rel=\"external\">https://github.com/christianalfoni/formsy-react</a></li>\n<li><a href=\"https://github.com/mbrookes/formsy-material-ui\" target=\"_blank\" rel=\"external\">https://github.com/mbrookes/formsy-material-ui</a> </li>\n</ul>\n<p>But you can use everything you want.</p>\n<p>There is a package that leverages work for you:\n<a href=\"https://github.com/meteor-utilities/react-list-container\" target=\"_blank\" rel=\"external\">https://github.com/meteor-utilities/react-list-container</a></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Log-me-in\"><a href=\"#1-Log-me-in\" class=\"headerlink\" title=\"1. Log me in!\"></a>1. Log me in!</h4><p>Create a route <code>/login</code> and a <code>Login.jsx</code> file. In it you will have a form. When the form is submitted, \nit will call <code>Meteor.loginWithPassword</code> and redirect him to “/“ <a href=\"/\">Hint 1</a></p>\n<h4 id=\"2-Private-Donuts\"><a href=\"#2-Private-Donuts\" class=\"headerlink\" title=\"2. Private Donuts!\"></a>2. Private Donuts!</h4><p>Only allow logged in users to view the donuts list, it is very private. <a href=\"\">Hint</a></p>\n<h4 id=\"3-Register\"><a href=\"#3-Register\" class=\"headerlink\" title=\"3. Register\"></a>3. Register</h4><p>Create a registration, use email and password for now.</p>\n<h4 id=\"4-Create-a-donut\"><a href=\"#4-Create-a-donut\" class=\"headerlink\" title=\"4. Create a donut\"></a>4. Create a donut</h4><p>As a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.</p>\n<h2 id=\"Over-achievers\"><a href=\"#Over-achievers\" class=\"headerlink\" title=\"Over-achievers\"></a>Over-achievers</h2><h4 id=\"1-Filters\"><a href=\"#1-Filters\" class=\"headerlink\" title=\"1. Filters\"></a>1. Filters</h4><p>In the donuts list, add a checkbox, when you click it it will only show the donuts with price &lt; 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!</p>\n<h4 id=\"2-Pagination-By-Methods-From-scratch\"><a href=\"#2-Pagination-By-Methods-From-scratch\" class=\"headerlink\" title=\"2. Pagination (By Methods) (From scratch)\"></a>2. Pagination (By Methods) (From scratch)</h4><p>Implement a pagination strategy (You can use: <a href=\"https://www.npmjs.com/package/react-paginator\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/react-paginator</a>). Where you display\nall the donuts, 3 items per page. <em>Quick tip</em>: You may need to create another method that retrieves the count for all donuts.</p>\n<h4 id=\"3-Pagination-By-Subscription-From-scratch\"><a href=\"#3-Pagination-By-Subscription-From-scratch\" class=\"headerlink\" title=\"3. Pagination (By Subscription) (From scratch)\"></a>3. Pagination (By Subscription) (From scratch)</h4><p>This one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don’t) but you want \nit know because you’re an over-achiever, check this meteor package for reactive counting:</p>\n<ul>\n<li><a href=\"https://github.com/percolatestudio/publish-counts\" target=\"_blank\" rel=\"external\">https://github.com/percolatestudio/publish-counts</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what’s going on here check the following resources:</p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"external\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a></li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"external\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a></li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/react-fundamentals</a></li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"external\">http://jaketrent.com/post/smart-dumb-components-react/</a></li>\n</ul>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add cultofcoders:meteor-react-routing</div><div class=\"line\">meteor npm install --save react react-mounter react-dom</div></pre></td></tr></table></figure>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>As we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the <code>/imports/ui</code> folder.</p>\n<p>Routing is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in <code>/imports/routing</code></p>\n<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>Please follow the README.md from: \n<a href=\"https://github.com/cult-of-coders/meteor-react-routing\" target=\"_blank\" rel=\"external\">https://github.com/cult-of-coders/meteor-react-routing</a></p>\n<p>After you have setup your files, created <code>/imports/routing/router.js</code>, <code>/imports/routing/index.js</code>, and you included the routing in your client/startup folder,\ncreated your <code>/imports/ui/App.jsx</code> file, and now it’s time to see this baby in action!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Reactive World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/routing/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> route <span class=\"keyword\">from</span> <span class=\"string\">'./router.js'</span></div><div class=\"line\"></div><div class=\"line\">route(<span class=\"string\">'/'</span>, Home);</div></pre></td></tr></table></figure>\n<p>Now access it: <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<h2 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h2><p>By default, if you read the tutorials on React, you realized that React is already reactive, by doing <code>this.setState</code> it will\nrerender efficiently your Component.</p>\n<p>Let’s see how we would call a method and show a response in our component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">donuts</span>: []&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        Meteor.call(<span class=\"string\">'donuts.list'</span>, (err, res) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">donuts</span>: res <span class=\"comment\">// assuming the method returns an array of donuts</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.state.donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Try it out, see if it works.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p>For publications we need Meteor’s reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don’t have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:</p>\n<p><a href=\"https://guide.meteor.com/react.html#using-createContainer\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/react.html#using-createContainer</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// terminal</div><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>react-meteor-<span class=\"meta\">data</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assuming you have a publication 'donuts' that returns Donuts.find()</span></div><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/react-meteor-data'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;loading, donuts&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div><div class=\"line\">    <span class=\"comment\">// reactive data sources will get tracked here</span></div><div class=\"line\">    <span class=\"comment\">// any change will result into a re-render of \"Home\" component</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">loading</span>: !handle.ready(),</div><div class=\"line\">        <span class=\"attr\">donuts</span>: Donuts.find().fetch()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, Home)</div></pre></td></tr></table></figure>\n<p>Go ahead, try adding a new donut from the Meteor’s shell. You’ll see it updated live.</p>\n<p>This is it. It’s just this simple. You now have the knowledge of integrating Meteor &amp; React. Now, we need to\nmaster it.</p>\n<p>In the homework you’ll most likely be dealing with forms, here are some starting points:</p>\n<ul>\n<li><a href=\"http://www.material-ui.com/\" target=\"_blank\" rel=\"external\">http://www.material-ui.com/</a></li>\n<li><a href=\"https://github.com/christianalfoni/formsy-react\" target=\"_blank\" rel=\"external\">https://github.com/christianalfoni/formsy-react</a></li>\n<li><a href=\"https://github.com/mbrookes/formsy-material-ui\" target=\"_blank\" rel=\"external\">https://github.com/mbrookes/formsy-material-ui</a> </li>\n</ul>\n<p>But you can use everything you want.</p>\n<p>There is a package that leverages work for you:\n<a href=\"https://github.com/meteor-utilities/react-list-container\" target=\"_blank\" rel=\"external\">https://github.com/meteor-utilities/react-list-container</a></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Log-me-in\"><a href=\"#1-Log-me-in\" class=\"headerlink\" title=\"1. Log me in!\"></a>1. Log me in!</h4><p>Create a route <code>/login</code> and a <code>Login.jsx</code> file. In it you will have a form. When the form is submitted, \nit will call <code>Meteor.loginWithPassword</code> and redirect him to “/“ <a href=\"/\">Hint 1</a></p>\n<h4 id=\"2-Private-Donuts\"><a href=\"#2-Private-Donuts\" class=\"headerlink\" title=\"2. Private Donuts!\"></a>2. Private Donuts!</h4><p>Only allow logged in users to view the donuts list, it is very private. <a href=\"\">Hint</a></p>\n<h4 id=\"3-Register\"><a href=\"#3-Register\" class=\"headerlink\" title=\"3. Register\"></a>3. Register</h4><p>Create a registration, use email and password for now.</p>\n<h4 id=\"4-Create-a-donut\"><a href=\"#4-Create-a-donut\" class=\"headerlink\" title=\"4. Create a donut\"></a>4. Create a donut</h4><p>As a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.</p>\n<h2 id=\"Over-achievers\"><a href=\"#Over-achievers\" class=\"headerlink\" title=\"Over-achievers\"></a>Over-achievers</h2><h4 id=\"1-Filters\"><a href=\"#1-Filters\" class=\"headerlink\" title=\"1. Filters\"></a>1. Filters</h4><p>In the donuts list, add a checkbox, when you click it it will only show the donuts with price &lt; 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!</p>\n<h4 id=\"2-Pagination-By-Methods-From-scratch\"><a href=\"#2-Pagination-By-Methods-From-scratch\" class=\"headerlink\" title=\"2. Pagination (By Methods) (From scratch)\"></a>2. Pagination (By Methods) (From scratch)</h4><p>Implement a pagination strategy (You can use: <a href=\"https://www.npmjs.com/package/react-paginator\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/react-paginator</a>). Where you display\nall the donuts, 3 items per page. <em>Quick tip</em>: You may need to create another method that retrieves the count for all donuts.</p>\n<h4 id=\"3-Pagination-By-Subscription-From-scratch\"><a href=\"#3-Pagination-By-Subscription-From-scratch\" class=\"headerlink\" title=\"3. Pagination (By Subscription) (From scratch)\"></a>3. Pagination (By Subscription) (From scratch)</h4><p>This one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don’t) but you want \nit know because you’re an over-achiever, check this meteor package for reactive counting:</p>\n<ul>\n<li><a href=\"https://github.com/percolatestudio/publish-counts\" target=\"_blank\" rel=\"external\">https://github.com/percolatestudio/publish-counts</a></li>\n</ul>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}